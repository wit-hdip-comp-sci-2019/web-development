


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-10 Todolist-2",
  "img" : "img/main.png",
  "videoid" : "CQKwWzame3Q",
  "objectivesMd" : "Incorporate sessions tracking into the todo app",
  "objectives" : "<p>Incorporate sessions tracking into the todo app</p>",
  "folder" : "book-sessions",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "#Objectives",
    "shortTitle": "Lab-10 Todolist-2",
    "contentMd" : "#Objectives\n\nIncorporate sessions tracking into the todo app"
    },
  
    {
    "title": "# Setup",
    "shortTitle": "01",
    "contentMd" : "# Setup\n\nThe starting point for this lab is the solutions to the Todo List app from the last lab. You will need to have completed these exercises in order to proceed.\n\nIf you still have some exercises not completed, then perhaps download this solution here:\n\n- <https://github.com/edeleastar/todolist/releases/tag/todolist-1.exercises>\n\nand import into Idea as we have described in earlier labs. This solution includes:\n\n- Exercise 1: Yaml + Bootatrap\n- Exercise 2: Tables\n- Exercise 3: Delete button\n- Exercise 4: Delete Implementation\n- Exercise 5: Admin Feature\n\nReview each of these exercises, and make sure you can follow the essentials of the implementation."
    },
  
    {
    "title": "# Views",
    "shortTitle": "02",
    "contentMd" : "# Views\n\nAssuming you are working from the sample solution - or your own completed todolist - we will start with the View.\n\n# Menus\n\nReplace the existing menu partial with the following:\n\n## app/views/tags/menu.html\n\n~~~\n<nav class=\"ui menu\">\n  <header class=\"ui header item\"> <a href=\"#\"> Todo List </a></header>\n  <div class=\"right menu\">\n    <a id=\"dashboard\" class=\"item\" href=\"/dashboard\"> Dashboard  </a>\n    <a id=\"about\" class=\"item\" href=\"/about\"> About </a>\n    <a id=\"logout\" class=\"item\" href=\"/logout\"> Logout </a>\n  </div>\n</nav>\n\n<script>\n  $(\"#${_id}\").addClass(\"active item\");\n</script>\n~~~\n\nIntroduce this new menu alongside the existing one:\n\n## app/views/tags/welcomenenu.html\n\n~~~\n<nav class=\"ui menu\">\n  <header class=\"ui header item\"> <a href=\"#\"> Todo List </a></header>\n  <div class=\"right menu\">\n    <a id=\"signup\" class=\"item\" href=\"/signup\"> Signup  </a>\n    <a id=\"login\" class=\"item\" href=\"/login\">  Login   </a>\n  </div>\n</nav>\n\n<script>\n  $(\"#${_id}\").addClass(\"active item\");\n</script>\n~~~ \n\n## New Views\n\nBring in these new views:\n\n## app/views/login.html\n\n~~~\n#{extends 'main.html' /}\n#{set title:'login' /}\n#{welcomemenu id:\"login\"/}\n\n<div class=\"ui two column middle aligned grid basic segment\">\n  <div class=\"column\">\n    <form class=\"ui stacked segment form\" action=\"/authenticate\" method=\"POST\">\n      <h3 class=\"ui header\">Log-in</h3>\n      <div class=\"field\">\n        <label>Email</label> <input placeholder=\"Email\" name=\"email\">\n      </div>\n      <div class=\"field\">\n        <label>Password</label> <input type=\"password\" name=\"password\">\n      </div>\n      <button class=\"ui blue submit button\">Login</button>\n    </form>\n  </div>\n  <div class=\"column\">\n    <img class=\"ui image\" src=\"/public/images/todo-2.jpg\">\n  </div>\n</div>\n~~~\n\n## views/app/signup.html\n\n~~~\n#{extends 'main.html' /}\n#{set title:'Signup' /}\n#{welcomemenu id:\"signup\"/}\n\n<div class=\"ui two column grid basic middle aligned segment\">\n  <div class=\"column\">\n    <form class=\"ui stacked segment form\" action=\"/register\" method=\"POST\">\n      <h3 class=\"ui header\">Register</h3>\n      <div class=\"two fields\">\n        <div class=\"field\">\n          <label>First Name</label>\n          <input placeholder=\"First Name\" type=\"text\" name=\"firstname\">\n        </div>\n        <div class=\"field\">\n          <label>Last Name</label>\n          <input placeholder=\"Last Name\" type=\"text\" name=\"lastname\">\n        </div>\n      </div>\n      <div class=\"field\">\n        <label>Email</label>\n        <input placeholder=\"Email\" type=\"text\" name=\"email\">\n      </div>\n      <div class=\"field\">\n        <label>Password</label>\n        <input type=\"password\" name=\"password\">\n      </div>\n      <button class=\"ui blue submit button\">Submit</button>\n    </form>\n  </div>\n  <div class=\"column\">\n    <img class=\"ui image\" src=\"/public/images/todo-1.png\">\n  </div>\n</div>\n~~~\n\nFinally for this step, change one line in the `start.html` view, from this:\n\n~~~\n...\n#{menu id:\"start\"/}\n...\n~~~\n\nto this:\n\n~~~\n...\n#{welcomemenu id:\"start\"/}\n...\n~~~\n\n\nSave everything now, and make sure that the app launches:\n\n- <http://localhost:9000>\n\nThe app should start with a new menu:\n\n![](img/01.png)\n\nHowever, the menu items will not work yet (try them).\n\n"
    },
  
    {
    "title": "# Accounts Routes + Controler",
    "shortTitle": "03",
    "contentMd" : "# Accounts Routes + Controler\n\nIntroduce the following new routes into the conf/routes file:\n\n## conf/routes\n\n~~~\nGET    /signup                                  Accounts.signup\nGET    /login                                   Accounts.login\n~~~\n\nThese routes lead to an accounts controller, which we can now bring in:\n\n\n## app/controllers/accounts.java\n\n~~~\npackage controllers;\n\nimport play.Logger;\nimport play.mvc.Controller;\n\npublic class Accounts extends Controller\n{\n  public static void signup()\n  {\n    render(\"signup.html\");\n  }\n\n  public static void login()\n  {\n    render(\"login.html\");\n  }\n}\n~~~\n\nRestart the app now, and you the signup/login forms should be rendered:\n\n![](img/02.png)\n\n![](img/03.png)\n\nThe submit buttons will not work yet however (try them).\n\nNotice we seem to have missing images in the above. Download these two images here:\n\n![](img/todo-1.png)\n![](img/todo-2.jpg)\n\nPlace them in the `public/images` folder in your project. If this goes correctly, the views should look like this:\n\n![](img/04.png)\n\n![](img/05.png)"
    },
  
    {
    "title": "# Member model",
    "shortTitle": "04",
    "contentMd" : "# Member model\n\nWe need a model to represent users (we will call them members) signed up to our application. Here is the class:\n\n## app/models/Member.java\n\n~~~\npackage models;\n\nimport play.db.jpa.Model;\n\nimport javax.persistence.CascadeType;\nimport javax.persistence.Entity;\nimport javax.persistence.OneToMany;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Entity\npublic class Member extends Model\n{\n  public String firstname;\n  public String lastname;\n  public String email;\n  public String password;\n\n  @OneToMany(cascade = CascadeType.ALL)\n  public List<Todo> todolist = new ArrayList<Todo>();\n\n  public Member(String firstname, String lastname, String email, String password)\n  {\n    this.firstname = firstname;\n    this.lastname = lastname;\n    this.email = email;\n    this.password = password;\n  }\n\n  public static Member findByEmail(String email)\n  {\n    return find(\"email\", email).first();\n  }\n\n  public boolean checkPassword(String password)\n  {\n    return this.password.equals(password);\n  }\n}\n~~~\n\nLook carefully at this class. It is relatively simple, except we see each menber has a `OneToMany` relationship to our existing todo class:\n\n\n~~~\n  @OneToMany(cascade = CascadeType.ALL)\n  public List<Todo> todolist = new ArrayList<Todo>();\n~~~\n\nWe already have a `data.yml` file containing some todos:\n\n\n## conf/data.yml\n\n~~~\nTodo(t1):\n  title: Make tea\n\nTodo(t2):\n  title: Go for snooze\n\nTodo(t3):\n  title: Make more tea\n~~~\n\nWe can extend this now, with some member objects:\n\n~~~\nTodo(t1):\n  title: Make tea\n\nTodo(t2):\n  title: Go for snooze\n\nTodo(t3):\n  title: Make more tea\n\nMember(m1):\n  firstname: homer\n  lastname: simpson\n  email: homer@simpson.com\n  password: secret\n\nMember(m2):\n  firstname: marge\n  lastname: simpson\n  email: marge@simpson.com\n  password: secret\n~~~\n\nRestart the app now - and browse to the database:\n\n- <localhost:9000/@db>\n\nWhen you connect, you should be able to see the Members table containing the users above:\n\n![](img/06.png)\n\nYou should make sure you can view the above. If you cannot, it may be:\n\n- incorrect connection string in the database login panel:\n\n![](img/07.png)\n\n- you connect before the app at properly launched. Do not browse to database until you have seen the first screen in the browser\n- you are connect to a previous version of the app. Just close the browser window and connect again.\n\nBefore proceeding, try to work out a procedure for reliably and consistently connecting to the database.\n\n## Database Errors\n\nOne last small change. Occasionally you will see an error from the app related to the database, particularly when you are making some small adjustments to the app, but without restarting\n\n![](img/08.png)\n\nHere is a small change to `Bootstrap.java` which will fix this problem:\n\n## app/Bootstrap.java\n\n~~~\nimport java.util.List;\n\nimport play.*;\nimport play.jobs.*;\nimport play.test.*;\n\nimport models.*;\n\n@OnApplicationStart\npublic class Bootstrap extends Job\n{\n  public void doJob()\n  {\n    if (Member.count() == 0)\n    {\n      Fixtures.loadModels(\"data.yml\");\n    }\n  }\n}\n~~~\n\n\n\n\n\n\n\n"
    },
  
    {
    "title": "# Signup",
    "shortTitle": "05",
    "contentMd" : "# Signup\n\nReview our signup form, and notice the action the form triggers:\n\n\n## app/views/signup.html\n\n~~~\n...\n    <form class=\"ui stacked segment form\" action=\"/register\" method=\"POST\">\n...\n~~~\n\nWe now implement this route:\n\n## conf/routes\n\n~~~\nPOST   /register                                Accounts.register\n~~~\n\nand here is the implementation of the matching action in the `Accounts` controller:\n\n\n## app/controllers/Accounts.java\n\n~~~\n...\n  public static void register(String firstname, String lastname, String email, String password)\n  {\n    Logger.info(\"Registering new user \" + email);\n    Member member = new Member(firstname, lastname, email, password);\n    member.save();\n    redirect(\"/\");\n  }\n...  \n~~~\n\nRestart the app now - and try the signup form. Register a new Member. Explore the database to see if the Member is actually created in the members table."
    },
  
    {
    "title": "# Login & Logout",
    "shortTitle": "06",
    "contentMd" : "# Login & Logout\n\nNow for the login form - a new route:\n\n## conf/routes\n\n~~~\nPOST   /authenticate                            Accounts.authenticate\n~~~\n\n## app/controllers/Accounts.java\n\n~~~\n...\n  public static void authenticate(String email, String password)\n  {\n    Logger.info(\"Attempting to authenticate with \" + email + \":\" + password);\n\n    Member member = Member.findByEmail(email);\n    if ((member != null) && (member.checkPassword(password) == true)) {\n      Logger.info(\"Authentication successful\");\n      session.put(\"logged_in_Memberid\", member.id);\n      redirect (\"/dashboard\");\n    } else {\n      Logger.info(\"Authentication failed\");\n      redirect(\"/login\");\n    }\n  }\n...  \n~~~\n\nRestart the app now, and try to log in. If you try with one of the preloaded user details, you should be in to the dashboard.\n\nIf you try to logout, you get a 404. We can now implement this as well:\n\n## conf/routes\n\n~~~\nGET    /logout                                  Accounts.logout\n~~~\n\n## app/controllers/Accounts.java\n\n~~~\n...\n  public static void logout()\n  {\n    session.clear();\n    redirect (\"/\");\n  }\n...  \n~~~\n\nWe should now be able to log in and log out.\n\nTry the following:\n\n- Log in as Homer, and create some todos\n- Log out\n- Log in as Marge - what todos are presented when marge logs in?\n\n\nYou might notice that the same todos are presented to each member. Clearly there is something wrong here - we should be segmenting them per user."
    },
  
    {
    "title": "# Current User",
    "shortTitle": "07",
    "contentMd" : "# Current User\n\nTo complete the app, a new method in the Accounts controller:\n\n## app/controller/Accounts.java\n\n~~~\n...\n  public static Member getLoggedInMember()\n  {\n    Member member = null;\n    if (session.contains(\"logged_in_Memberid\")) {\n      String memberId = session.get(\"logged_in_Memberid\");\n      member = Member.findById(Long.parseLong(memberId));\n    } else {\n      login();\n    }\n    return member;\n  }\n...\n~~~\n\nThe Dashoard index method can now be updated:\n\n## app/controllers/Dashboard.java\n\n~~~\n...\n  public static void index()\n  {\n    Logger.info(\"Rendering Dashboard\");\n    Member member = Accounts.getLoggedInMember();\n    List<Todo> todolist = member.todolist;\n    render(\"dashboard.html\", member, todolist);\n  }\n...  \n~~~\n\nNotice how we are changing how we retrieve the todos. Also, we are not passing `member` as well as `todolist` to the view.\n\nWe also need a new version of the `addTodo` method:\n\n~~~\n  public static void addTodo(String title)\n  {\n    Member member = Accounts.getLoggedInMember();\n    Todo todo = new Todo(title);\n    member.todolist.add(todo);\n    member.save();\n    Logger.info(\"Adding Todo\" + title);\n    redirect(\"/dashboard\");\n  }\n~~~\n\nWe can make use of the `member` in the dashboard view, replacing the header with the following:\n\n## app/views/dashboard.html\n\n~~~\n...\n  <header class=\"ui header\">\n    ${member.firstname} ${member.lastname}'s Todo List\n  </header>\n...\n~~~\n\nRestart the app now - and as different member, create some todos. Make sure that each member only sees his/her own todos.\n\nWe might also change the data.yml file to associate the todos with the members:\n\n## conf/data.yml\n\n~~~\nTodo(t1):\n  title: Make tea\n\nTodo(t2):\n  title: Go for snooze\n\nTodo(t3):\n  title: Make more tea\n\nMember(m1):\n  firstname: homer\n  lastname: simpson\n  email: homer@simpson.com\n  password: secret\n  todolist:\n  - t1\n  - t2\n\nMember(m2):\n  firstname: marge\n  lastname: simpson\n  email: marge@simpson.com\n  password: secret\n  todolist:\n  - t3\n~~~\n\nRestart the app, and verify that the indicated todos are visible when the user logs in.\n\n"
    },
  
    {
    "title": "# Delete Todos",
    "shortTitle": "08",
    "contentMd" : "# Delete Todos\n\nDelete a todo will cause an error:\n\n![](img/09.png)\n\nWe will need to rethink how we do the todo delete method.\n\nThe main problem is that any given todo now 'belongs' to a member - so just deleting it will cause a problem for the 'integrity' of the database.\n\nHere is a revised version of the method:\n\n## app/controllers/Dashboard.java\n\n~~~\n...\n  public static void deleteTodo(Long id, Long todoid)\n  {\n    Member member = Member.findById(id);\n    Todo todo = Todo.findById(todoid);\n    member.todolist.remove(todo);\n    member.save();\n    todo.delete();\n    Logger.info(\"Deleting \" + todo.title);\n    redirect(\"/dashboard\");\n  }\n...\n~~~\n\nThis version is different:\n\n- we are expecting the id of the member + the id of the todo\n- We fetch both the member and the todo from the database\n- remove it from the member list\n- save the member\n- delete the todo\n\nFor this to work, we need this revised route:\n\n## conf/routes\n\n~~~\nGET     /dashboard/{id}/deletetodo/{todoid}     Dashboard.deleteTodo\n~~~\n\n(replace the existing deleteTodo route)\n\nWe also need a completely revised button in the dashboard:\n\n~~~\n        <td> <a href=\"/dashboard/${member.id}/deletetodo/${todo.id} \" class=\"ui tiny red button\"> Delete </a> </td>\n~~~\n\nRestart the app - and verify that the todos can now be deleted successfully."
    },
  
    {
    "title": "# Exercises",
    "shortTitle": "Exercises",
    "contentMd" : "# Exercises\n\nArchive of the project so far:\n\n- <https://github.com/edeleastar/todolist/releases/tag/todolist-2.end>\n\n\n## Exercise 1: Locate the Session Cookie in Chrome Developer Tools\n\nThe developer tools in chrome allow you to see in detail the workings of the browser. In particular, under `Application->Cookies` we can see the cookie our application has created:\n\n![](img/10.png)\n\nIf we log out, it will be deleted:\n\n![](img/11.png)\n\nExperiment with locating the cookie - try to delete it manually, and see what effect it has on the app.\n\nThe developer tools can also reveal the cookie in transit during a request:\n\n![](img/12.png)\n\nSee if you can locate the above view in Chrome.\n\n## Exercise 2: Introduce sessions into Playlist.\n\nThis is the final playlist project:\n\n- <https://github.com/edeleastar/playlist/releases/tag/playlist.4.end>\n\nUsing this, or your own completed solution from lab 09, try to incorporate the `session` support we have just implemented in todo into the playlist app.\n\nEssentially, we would like only members to be able to use the playlist app, and the members playlists are kept separate from other members."
    }
  
  ]
  }

