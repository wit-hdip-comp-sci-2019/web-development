


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-11b Playlist 5",
  "img" : "img/main.png",
  "videoid" : "xUcWmTM7qt0",
  "objectives" : "<p>Incorporate Sessions into the latest Playlist Application</p>",
  "folder" : "book-2",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "#Objectives",
    "shortTitle": "Lab-11b Playlist 5",
    "contentMd" : "#Objectives\n\nIncorporate Sessions into the latest Playlist Application\n"
    },
  
    {
    "title": "# Accounts + Members",
    "shortTitle": "01",
    "contentMd" : "# Accounts + Members\n\nThis lab assumes you have completed Lab-09b: Playlist-4. If you are unsure - you can download this completed version:\n\n- <https://github.com/wit-hdip-comp-sci-2019/playlist/releases/tag/playlist.4.end>\n\nThe Todolist application evolved `Member` model + an  `Accounts` controller that we used to manage signup/login features. These are the classes from the Todo appkication here:\n\n\n## Accounts\n\n~~~\npackage controllers;\n\nimport models.Member;\nimport play.Logger;\nimport play.mvc.Controller;\n\npublic class Accounts extends Controller\n{\n  public static void signup()\n  {\n    render(\"signup.html\");\n  }\n\n  public static void login()\n  {\n    render(\"login.html\");\n  }\n\n  public static void register(String firstname, String lastname, String email, String password)\n  {\n    Logger.info(\"Registering new user \" + email);\n    Member member = new Member(firstname, lastname, email, password);\n    member.save();\n    redirect(\"/\");\n  }\n\n  public static void authenticate(String email, String password)\n  {\n    Logger.info(\"Attempting to authenticate with \" + email + \":\" + password);\n\n    Member member = Member.findByEmail(email);\n    if ((member != null) && (member.checkPassword(password) == true)) {\n      Logger.info(\"Authentication successful\");\n      session.put(\"logged_in_Memberid\", member.id);\n      redirect (\"/dashboard\");\n    } else {\n      Logger.info(\"Authentication failed\");\n      redirect(\"/login\");\n    }\n  }\n\n  public static void logout()\n  {\n    session.clear();\n    redirect (\"/\");\n  }\n\n  public static Member getLoggedInMember()\n  {\n    Member member = null;\n    if (session.contains(\"logged_in_Memberid\")) {\n      String memberId = session.get(\"logged_in_Memberid\");\n      member = Member.findById(Long.parseLong(memberId));\n    } else {\n      login();\n    }\n    return member;\n  }\n}\n~~~\n\n## Member\n\n~~~\npackage models;\n\nimport play.db.jpa.Model;\n\nimport javax.persistence.CascadeType;\nimport javax.persistence.Entity;\nimport javax.persistence.OneToMany;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Entity\npublic class Member extends Model\n{\n  public String firstname;\n  public String lastname;\n  public String email;\n  public String password;\n\n  @OneToMany(cascade = CascadeType.ALL)\n  public List<Todo> todolist = new ArrayList<Todo>();\n\n  public Member(String firstname, String lastname, String email, String password)\n  {\n    this.firstname = firstname;\n    this.lastname = lastname;\n    this.email = email;\n    this.password = password;\n  }\n\n  public static Member findByEmail(String email)\n  {\n    return find(\"email\", email).first();\n  }\n\n  public boolean checkPassword(String password)\n  {\n    return this.password.equals(password);\n  }\n}\n~~~\n\nBring these two classes into your Playlist application now. The Member class will have an error:\n\n~~~\n  public List<Todo> todolist = new ArrayList<Todo>();\n~~~\n\nThis is a holdover from the Todo application. Replace the above line with this:\n\n~~~\n  public List<Playlist> playlists = new ArrayList<Playlist>();\n~~~\n\nEach member will have a list of `Playlist` objects, called playlists. This is the members personal collection of playlists.\n\n\nThe project should now be without errors:\n\n![](img/06.png)\n\n"
    },
  
    {
    "title": "# Signup & Login Forms + welcome Memu",
    "shortTitle": "02",
    "contentMd" : "# Signup & Login Forms + welcome Memu\n\nTodolist also has signup and login views - which implement simple forms for this purpose:\n\n## views/signup.html\n\n~~~\n#{extends 'main.html' /}\n#{set title:'Signup' /}\n#{welcomemenu id:\"signup\"/}\n\n<div class=\"ui two column grid basic middle aligned segment\">\n    <div class=\"column\">\n        <form class=\"ui stacked segment form\" action=\"/register\" method=\"POST\">\n            <h3 class=\"ui header\">Register</h3>\n            <div class=\"two fields\">\n                <div class=\"field\">\n                    <label>First Name</label>\n                    <input placeholder=\"First Name\" type=\"text\" name=\"firstname\">\n                </div>\n                <div class=\"field\">\n                    <label>Last Name</label>\n                    <input placeholder=\"Last Name\" type=\"text\" name=\"lastname\">\n                </div>\n            </div>\n            <div class=\"field\">\n                <label>Email</label>\n                <input placeholder=\"Email\" type=\"text\" name=\"email\">\n            </div>\n            <div class=\"field\">\n                <label>Password</label>\n                <input type=\"password\" name=\"password\">\n            </div>\n            <button class=\"ui blue submit button\">Submit</button>\n        </form>\n    </div>\n    <div class=\"column\">\n        <img class=\"ui image\" src=\"/public/images/todo-1.png\">\n    </div>\n</div>\n~~~\n\n\n## views/login.html\n\n~~~\n#{extends 'main.html' /}\n#{set title:'login' /}\n#{welcomemenu id:\"login\"/}\n\n<div class=\"ui two column middle aligned grid basic segment\">\n  <div class=\"column\">\n    <form class=\"ui stacked segment form\" action=\"/authenticate\" method=\"POST\">\n      <h3 class=\"ui header\">Log-in</h3>\n      <div class=\"field\">\n        <label>Email</label> <input placeholder=\"Email\" name=\"email\">\n      </div>\n      <div class=\"field\">\n        <label>Password</label> <input type=\"password\" name=\"password\">\n      </div>\n      <button class=\"ui blue submit button\">Login</button>\n    </form>\n  </div>\n  <div class=\"column\">\n    <img class=\"ui image\" src=\"/public/images/todo-2.jpg\">\n  </div>\n</div>\n~~~\n\n\nIt also has this partial - a menu to support signup + login options:\n\n\n## views/tags/welcomemenu.html\n\n~~~\n<nav class=\"ui menu\">\n  <header class=\"ui header item\"> <a href=\"#\"> Playlist 5 </a></header>\n  <div class=\"right menu\">\n    <a id=\"signup\" class=\"item\" href=\"/signup\"> Signup  </a>\n    <a id=\"login\" class=\"item\" href=\"/login\">  Login   </a>\n  </div>\n</nav>\n\n<script>\n  $(\"#${_id}\").addClass(\"active item\");\n</script>\n~~~\n\nBring this in now.\n\nThe existing `menu.html` will need an additional option to support log out:\n\n## views/tags/menu.html\n\n~~~\n<nav class=\"ui menu\">\n  <header class=\"ui header item\"> <a href=\"#\"> Playlist 5 </a></header>\n  <div class=\"right menu\">\n    <a id=\"dashboard\" class=\"item\" href=\"/dashboard\"> Dashboard  </a>\n    <a id=\"about\" class=\"item\" href=\"/about\"> About </a>\n    <a id=\"logout\" class=\"item\" href=\"/logout\"> Logout </a>\n  </div>\n</nav>\n\n<script>\n  $(\"#${_id}\").addClass(\"active item\");\n</script>\n~~~\n\n\nWe should change the `start` view to include this menu instead of the main menu:\n\n## views/start.html\n\n~~~\n#{extends 'main.html' /}\n#{set title:'Start' /}\n\n#{welcomemenu id:\"start\"/}\n\n<section class=\"ui center aligned middle aligned segment\">\n  <h1 class=\"ui header\">\n    Welcome to Playlist 5\n  </h1> \n  <p>\n    A small app to let you compose playlists. This app will allow you to create, manage and share your playlists. Simple enter the playlist details one the dashboard.\n\n    Please Signup or Login using the menu above.\n  </p>\n</section>\n~~~\n\n\nThe view folder of the project should now look like this:\n\n![](img/07.png)\n"
    },
  
    {
    "title": "# Routes",
    "shortTitle": "03",
    "contentMd" : "# Routes\n\nThese forms require these additional routes:\n\n## conf/routes\n\n~~~\nGET    /signup                                  Accounts.signup\nGET    /login                                   Accounts.login\nPOST   /register                                Accounts.register\nPOST   /authenticate                            Accounts.authenticate\nGET    /logout                                  Accounts.logout\n~~~\n\n\nMake sure to place these additional route towards the top of the file:\n\n~~~\n# Home page\nGET     /                                       Start.index\n\nGET    /signup                                  Accounts.signup\nGET    /login                                   Accounts.login\nPOST   /register                                Accounts.register\nPOST   /authenticate                            Accounts.authenticate\nGET    /logout                                  Accounts.logout\n...\n~~~\n\nRun the application now - and sign up 2 users and log in as each user in turn. Experiment with the various forms.\n\nDo you notice the slightly odd behaviour? We seem to have a single playlist - regardless of who is logged in.\n\nClearly this is not what we intended - each user should have their own playlist, separate from other users. We will tackle this in the next step.\n\n\n\n"
    },
  
    {
    "title": "# Sessions - Dashboard",
    "shortTitle": "04",
    "contentMd" : "# Sessions - Dashboard\n\nThis is the current version of the Dashboard controller:\n\n~~~\npackage controllers;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport models.Playlist;\nimport models.Song;\nimport play.Logger;\nimport play.mvc.Controller;\n\npublic class Dashboard extends Controller\n{\n  public static void index() \n  {\n    Logger.info(\"Rendering Admin\");\n    \n    List<Playlist> playlists = Playlist.findAll();\n    render (\"dashboard.html\", playlists);\n  }\n\n  public static void deletePlaylist (Long id)\n  {\n    Playlist playlist = Playlist.findById(id);\n    Logger.info (\"Removing\" + playlist.title);\n    playlist.delete();\n    redirect (\"/dashboard\");\n  }\n\n  public static void addPlaylist (String title)\n  {\n    Playlist playlist = new Playlist (title, 0);\n    Logger.info (\"Adding a new playlist called \" + title);\n    playlist.save();\n    redirect (\"/dashboard\");\n  }\n}\n~~~\n\nIn the above, there is no reference to the currently logged in user - a single global collection of playlists is manipulated.\n\nReplace this controller with the following version:\n\n## Dashboard.java\n\n~~~\npackage controllers;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport models.Member;\nimport models.Playlist;\nimport models.Song;\nimport play.Logger;\nimport play.mvc.Controller;\n\npublic class Dashboard extends Controller\n{\n  public static void index() \n  {\n    Logger.info(\"Rendering Dasboard\");\n    Member member = Accounts.getLoggedInMember();\n    List<Playlist> playlists = member.playlists;\n    render (\"dashboard.html\", playlists);\n  }\n\n  public static void deletePlaylist (Long id)\n  {\n    Logger.info(\"Deleting a Playlist\");\n    Member member = Accounts.getLoggedInMember();\n    Playlist playlist = Playlist.findById(id);\n    member.playlists.remove(playlist);\n    member.save();\n    playlist.delete();\n    redirect (\"/dashboard\");\n  }\n\n  public static void addPlaylist (String title)\n  {\n    Logger.info(\"Adding a Playlist\");\n    Member member = Accounts.getLoggedInMember();\n    Playlist playlist = new Playlist (title, 0);\n    member.playlists.add(playlist);\n    member.save();\n    redirect (\"/dashboard\");\n  }\n}\n~~~\n\nThis is modelled on the equivalent controller in the Todolist-2 application. Each controller method always carries out the following:\n\n- Log a suitable message\n- Get the currently logged in member\n- Manipulate that members playlists\n\n\nRun the application now again, and verify that you can create and delete playlists. Keep a note of the names of the playlists you create for a given user - and switch users a few times. Verify that you are only manipulating the playlists for the logged in user.\n\n\n\n\n"
    },
  
    {
    "title": " # Sessions - PlaylistCtrl",
    "shortTitle": "05",
    "contentMd" : " # Sessions - PlaylistCtrl\n\n This is the current version of PlaylistCtrl\n\n ## PlaylistCtrl\n\n ~~~\npublic class PlaylistCtrl extends Controller\n{\n  public static void index(Long id)\n  {\n    Playlist playlist = Playlist.findById(id);\n    Logger.info (\"Playlist id = \" + id);\n    render(\"playlist.html\", playlist);\n  }\n\n  public static void deletesong (Long id, Long songid)\n  {\n    Playlist playlist = Playlist.findById(id);\n    Song song = Song.findById(songid);\n    Logger.info (\"Removing\" + song.title);\n    playlist.songs.remove(song);\n    playlist.save();\n    song.delete();\n    render(\"playlist.html\", playlist);\n  }\n\n  public static void addSong(Long id, String title, String artist, int duration)\n  {\n    Song song = new Song(title, artist, duration);\n    Playlist playlist = Playlist.findById(id);\n    playlist.songs.add(song);\n    playlist.save();\n    redirect (\"/playlists/\" + id);\n  }\n}\n~~~\n\nWithout making any changes to this class, log in as 2 different users, and populate a few playlists for each. Verify that when you switch users that the playlists are always appropriate to the logged in user.\n\nConsider the following questions:\n\n- (1) Why do we not need a reference to the currently logged in user in this class?\n- (2) Could we trigger a route leading to one of these methods without logging in at all?\n- (3) If (2) is possible, how could we prevent this happening?\n\n\n\n"
    },
  
    {
    "title": "# Model Seeding I",
    "shortTitle": "07",
    "contentMd" : "# Model Seeding I\n\nThis is our current `data.yml` file:\n\n~~~\nSong(s1):\n  title: Piano Sonata No. 3\n  artist: Beethoven\n  duration: 5\nSong(s2):\n  title: Piano Sonata No. 7\n  artist: Beethoven\n  duration: 6\nSong(s3):\n  title: Piano Sonata No. 10\n  artist: Beethoven\n  duration: 8  \nSong(s4):\n  title: Piano Concerto No. 27\n  artist: Beethoven\n  duration: 8\nSong(s5):\n  title: Piano Concertos No. 17\n  artist: Beethoven\nSong(s6):\n  title: Piano Concerto No. 10\n  artist: Beethoven\n  duration: 12    \nSong(s7):\n  title: Opus 34 Six variations on a theme in F major\n  artist: Beethoven\nSong(s8):\n  title: Opus 120 Thirty-three variations on a waltz by Diabelli in C major\n  artist: Beethoven\n  \nPlaylist(p1):\n  title: Bethoven Sonatas\n  duration: 19\n  songs:\n  - s1\n  - s2\n  - s3\n  \nPlaylist(p2):\n  title: Bethoven Concertos\n  duration: 23\n  songs:\n  - s4\n  - s5\n  - s6  \n  \nPlaylist(p3):\n  title: Beethoven Variations\n  duration: 26\n  songs:\n  - s7\n  - s8\n~~~\n\nThe contents of this file are still quite valid, but we can extend it to include members as well.\n\nAppend the following to the end of the file:\n\n~~~\nMember(m1):\n  firstname: homer\n  lastname: simpson\n  email: homer@simpson.com\n  password: secret\n\nMember(m2):\n  firstname: marge\n  lastname: simpson\n  email: marge@simpson.com\n  password: secret\n~~~\n\nRestart the app - and verify that you can log in these users without signing up.\n\n"
    },
  
    {
    "title": "# Model Seeding II",
    "shortTitle": "08",
    "contentMd" : "# Model Seeding II\n\nRevise the homer entry in the yml file:\n\n~~~\nMember(m1):\n  firstname: homer\n  lastname: simpson\n  email: homer@simpson.com\n  password: secret\n  playlists:\n  - p1\n  - p2\n~~~\n\nRestart the app - and verify that when you log in homer has the contents of playlists p1 and p2\n\n"
    },
  
    {
    "title": "# Solution",
    "shortTitle": "Exercises",
    "contentMd" : "# Solution\n\nArchive of the project so far:\n\n- <https://github.com/wit-hdip-comp-sci-2019/playlist/releases/tag/playlist.5.end>\n\n\n## Exercise 1:\n\nIn the yml file, add playlist `p3` to the marge user. Verify (by restarting) that this has worked.\n\n## Exercise 2:\n\nAdd some more songs, playlists and users to the yml file. Verify they are loaded (after an application restart)\n\n## Exercise 3:\n\nIf you look at the Signup or Login views in the app:\n\n![](img/08.png)\n\nNotice there seems to be a missing image on the right. Try to ensure that some stock image appears here.\n\nHINTL: Review Todolist 2, which has a solution to this issue.\n\n\n"
    }
  
  ]
  }

