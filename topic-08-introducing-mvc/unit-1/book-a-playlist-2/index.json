


  {
  
  
  "type" : "lab",
  "title" : "Lab-08a Playlist-2",
  "img" : "book-a-playlist-2/img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Move the playlist model into the database. Prime the database from a YAML file.</p>",
    
      "properties" : {},
    
    
      "folder" : "book-a-playlist-2",
    
    
      "link" : "book-a-playlist-2/index.html",
    
  "los": [
     ]
,
  "chapters" : [
  
    {
    "title": " Objectives",
    "shortTitle": "Lab-08a Playlist-2",
    "contentMd" : "# Objectives\n\nMove the playlist model into the database. Prime the database from a YAML file.\n"
    },
  
    {
    "title": " Exercise Solutions",
    "shortTitle": "Exercise Solutions",
    "contentMd" : "# Exercise Solutions\n\nThis is the Playlist application as completed in Lab 07b:\n\n- <https://github.com/edeleastar/playlist/releases/tag/playist-1.end>\n\nBelow as solutions to the exercises from Lab07b\n\n## Exercise 3: Add a new playlist\n\nExtend your version of the app to contain a new playlist - make up some songs. Verify that they are rendered as expected.\n\n## Solution\n\n## app/controllers/Dashboard.java\n\n~~~\n    //...\n    Song s7 = new Song (\"Opus 34: Six variations on a theme in F major\", \"Beethoven\");\n    Song s8 = new Song (\"Opus 120: Thirty-three variations on a waltz by Diabelli in C major\", \"Beethoven\");\n    Playlist p3 = new Playlist(\"Beethoven Variations\");\n    p3.songs.add (s7);\n    p3.songs.add (s8);\n    //...\n    playlists.add(p3);\n    //...\n~~~\n\n## Exercise 4: New Fields\n\nExtend the song model to also have a `duration` field. Change the constructor to initialise this field. Modify the dashboard view to display it. Also include a duration field in the Playlist.\n\n\n### app/models/song.java\n\n~~~\npackage models;\n\npublic class Song\n{\n  public String title;\n  public String artist;\n  public int duration;\n  \n  public Song(String title, String artist, int duration)\n  {\n    this.title = title;\n    this.artist = artist;\n    this.duration = duration;\n  }\n}\n~~~\n\n### app/models/playlist.java\n\n~~~\npackage models;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Playlist\n{\n  public String title;\n  public List<Song> songs = new ArrayList<Song>();\n  public int duration;\n\n  public Playlist(String title, int duration)\n  {\n    this.title = title;\n    this.duration = duration;\n  }\n}\n~~~\n\napp/controllers/Dashboard.java\n\n\n~~~\n    Song s1 = new Song(\"Piano Sonata No. 3\", \"Beethoven\", 5);\n    Song s2 = new Song(\"Piano Sonata No. 7\", \"Beethoven\", 6);\n    Song s3 = new Song(\"Piano Sonata No. 10\", \"Beethoven\",8 );\n    Playlist p1 = new Playlist(\"Beethoven Sonatas\", 19);\n    p1.songs.add (s1);\n    p1.songs.add (s2);\n    p1.songs.add (s3);\n    \n    Song s4 = new Song(\"Piano Concerto No. 1\", \"Beethoven\", 8);\n    Song s5 = new Song(\"Piano Concerto No. 12\", \"Beethoven\", 12);\n    Song s6 = new Song(\"Piano Concerto No. 23\", \"Beethoven\", 23);\n    Playlist p2 = new Playlist(\"Beethoven Concertos\", 43);\n    p2.songs.add (s4);\n    p2.songs.add (s5);\n    p2.songs.add (s6);\n    \n    Song s7 = new Song (\"Opus 34: Six variations on a theme in F major\", \"Beethoven\", 12);\n    Song s8 = new Song (\"Opus 120: Thirty-three variations on a waltz by Diabelli in C major\", \"Beethoven\", 14);\n    Playlist p3 = new Playlist(\"Beethoven Variations\", 26);\n    p3.songs.add (s7);\n    p3.songs.add (s8);\n\n~~~\n\nModify the dashboard view to display these new fields.\n\n### app/views/dashboard.html\n\n~~~\n#{extends 'main.html' /}\n#{set title:'Dashboard' /}\n\n#{menu id:\"dashboard\"/}\n\n#{list items:playlists, as:'playlist'}\n  <section class=\"ui segment\">\n    <h2 class=\"ui header\">\n      ${playlist.title} \n    </h2>\n    Total Duration: ${playlist.duration}\n    #{listsongs playlist:playlist/}\n  </section>\n#{/list}\n~~~\n\n### app/views/tags/listsongs.hbs\n\n~~~\n<table class=\"ui fixed table\">\n  <thead>\n    <tr>\n      <th>Song</th>\n      <th>Artist</th>\n      <th>Duration</th>\n    </tr>\n  </thead>\n  <tbody>\n    #{list items:_playlist.songs, as:'song'}\n      <tr>\n        <td>\n          ${song.title}\n        </td>\n        <td>\n          ${song.artist}\n        </td>\n        <td>        \n          ${song.duration}\n        </td>        \n      </tr>\n    #{/list}\n  </tbody>\n</tabl\n~~~\n\n## Exercise 4: Extend Views\n\nExtend the following views:\n\n- Start: Extend the start view to contain a more detailed outline of the purpose of the application\n- About: Extend the about view to provide contact details (may be fictitious) for the author/company that created the app.\n\n## app/views/start.html\n\n~~~html\n#{extends 'main.html' /}\n#{set title:'Start' /}\n\n#{menu id:\"start\"/}\n\n<section class=\"ui center aligned middle aligned segment\">\n  <h1 class=\"ui header\">\n    Welcome to Playlist 1\n  </h1> \n  <p>\n    A small app to let you compose playlists. This app will allow you to create, manage and share your playlists. Simple enter the playlist details one the dashboard.\n  </p>\n</section>\n~~~\n\n## app/views/about.html\n\n~~~html\n#{extends 'main.html' /}\n#{set title:'About' /}\n\n#{menu id:\"about\"/}\n\n<section class=\"ui center aligned middle aligned segment\">\n  <p>\n    A Little Playlist Maker - Version 1. Prepared by Playlist Solutions, Playlist Mansions, PlaylistTown.\n  </p>\n\n</section>\n~~~\n\n\n\n\n"
    },
  
    {
    "title": " Yaml",
    "shortTitle": "01",
    "contentMd" : "# Yaml\n\nCreate a new file in the `conf` folder of the Playlist project called `data.yml`. Here are its contents:\n\n\n## conf/data.yml\n\n~~~\nSong(s1):\n  title: Piano Sonata No. 3\n  artist: Beethoven\n  duration: 5\nSong(s2):\n  title: Piano Sonata No. 7\n  artist: Beethoven\n  duration: 6\nSong(s3):\n  title: Piano Sonata No. 10\n  artist: Beethoven\n  duration: 8  \nSong(s4):\n  title: Piano Concerto No. 27\n  artist: Beethoven\n  duration: 8\nSong(s5):\n  title: Piano Concertos No. 17\n  artist: Beethoven\nSong(s6):\n  title: Piano Concerto No. 10\n  artist: Beethoven\n  duration: 12    \n  \nPlaylist(p1):\n  title: Bethoven Sonatas\n  duration: 19\n  songs:\n  - s1\n  - s2\n  - s3\n  \nPlaylist(p2):\n  title: Bethoven Concertos\n  duration: 23\n  songs:\n  - s4\n  - s5\n  - s6  \n~~~\n\nThis is a YAML file - a notation for describing configuration data and structure information:\n\n- <https://en.wikipedia.org/wiki/YAML>\n\nWe will use this to describe initial values for our model objects.\n"
    },
  
    {
    "title": " Model",
    "shortTitle": "02",
    "contentMd" : "# Model\n\nRevise the Model classes, by changing the structure of both model classes:\n\n## app/models/Song.java\n\n~~~\npackage models;\n\nimport javax.persistence.Entity;\n\nimport play.db.jpa.Model;\n\n@Entity\npublic class Song extends Model\n{\n  public String title;\n  public String artist;\n  public int duration;\n  \n  public Song(String title, String artist, int duration)\n  {\n    this.title = title;\n    this.artist = artist;\n    this.duration = duration;\n  }\n}\n~~~\n\n## app/models/Playlist.java\n\n~~~\npackage models;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.persistence.CascadeType;\nimport javax.persistence.Entity;\nimport javax.persistence.OneToMany;\n\nimport play.db.jpa.Model;\n\n@Entity\npublic class Playlist extends Model\n{\n  public String title;\n  @OneToMany(cascade = CascadeType.ALL)\n  public List<Song> songs = new ArrayList<Song>();\n  public int duration;\n\n  public Playlist(String title, int duration)\n  {\n    this.title = title;\n    this.duration = duration;\n  }\n}\n~~~\n\nThese versions are largely the same as the current version, except that there are a number of additional 'annotations':\n\n~~~\n...\n@Entity\n...\n@OneToMany(cascade = CascadeType.ALL)\n...\n~~~\n\nThe purpose of these is to associated these classes with a Database.\n\nNow modify Dashboard.java - removing all of the playlists + songs:\n\n## app/controllers/Dashboard.java\n\n~~~\n...\n//    Song s1 = new Song(\"Piano Sonata No. 3\", \"Beethoven\", 5);\n//    Song s2 = new Song(\"Piano Sonata No. 7\", \"Beethoven\", 6);\n//    Song s3 = new Song(\"Piano Sonata No. 10\", \"Beethoven\",8 );\n//    Playlist p1 = new Playlist(\"Beethoven Sonatas\", 19);\n//    p1.songs.add (s1);\n//    p1.songs.add (s2);\n//    p1.songs.add (s3);\n//    \n//    Song s4 = new Song(\"Piano Concerto No. 1\", \"Beethoven\", 8);\n//    Song s5 = new Song(\"Piano Concerto No. 12\", \"Beethoven\", 12);\n//    Song s6 = new Song(\"Piano Concerto No. 23\", \"Beethoven\", 23);\n//    Playlist p2 = new Playlist(\"Beethoven Concertos\", 43);\n//    p2.songs.add (s4);\n//    p2.songs.add (s5);\n//    p2.songs.add (s6);\n//    \n//    Song s7 = new Song (\"Opus 34: Six variations on a theme in F major\", \"Beethoven\", 12);\n//    Song s8 = new Song (\"Opus 120: Thirty-three variations on a waltz by Diabelli in C major\", \"Beethoven\", 14);\n//    Playlist p3 = new Playlist(\"Beethoven Variations\", 26);\n//    p3.songs.add (s7);\n//    p3.songs.add (s8);\n//    \n//    List<Playlist> playlists = new ArrayList<Playlist>();\n//    playlists.add(p1);\n//    playlists.add(p2);\n//    playlists.add(p3);\n\n    render (\"dashboard.html\");\n...\n~~~\n\nMake sure the app is compiling and running without any erors - you may need to restart to make sure. Remember, to restart you enter Ctrl-C in the console use used to start the application.\n\n\n\n"
    },
  
    {
    "title": " Bootstrap",
    "shortTitle": "03",
    "contentMd" : "# Bootstrap\n\nCreate a new class in the `app` package containing this code here:\n\n~~~\nimport java.util.List;\n\nimport play.*;\nimport play.jobs.*;\nimport play.test.*;\n \nimport models.*;\n \n@OnApplicationStart\npublic class Bootstrap extends Job \n{ \n  public void doJob()\n  {\n    Fixtures.loadModels(\"data.yml\");\n  }\n}\n~~~\n\nDo this be selecting the `app` package, and then selecting `New->Java Class`\n\n![](img/00.png)\n\nCreating the class:\n\n![](img/00a.png)\n\nThe class should be in the `app` package:\n\n![](img/00b.png)\n\nRestart the project - and visit the Dashboard view. You should see the playlists in data.yml rendered to the view. \n\n![](img/00c.png)\n\nKeep a close eye on the console as you do this - you should see something like this:\n\n~~~\n~        _            _\n~  _ __ | | __ _ _  _| |\n~ | '_ \\| |/ _' | || |_|\n~ |  __/|_|\\____|\\__ (_)\n~ |_|            |__/\n~\n~ play! 1.5.2, https://www.playframework.com\n~\n~ Ctrl+C to stop\n~\n~ using java version \"1.8.0_162\"\nListening for transport dt_socket at address: 8000\n17:53:49,806 INFO  ~ Starting /Users/edeleastar/dev/playlist-2\n17:53:49,906 WARN  ~ You're running Play! in DEV mode\n17:53:50,007 INFO  ~ Listening for HTTP on port 9000 (Waiting a first request to start) ...\n~ Server is up and running\n17:53:59,610 INFO  ~ HikariPool-1 - Starting...\n17:53:59,648 INFO  ~ HikariPool-1 - Start completed.\n17:53:59,662 INFO  ~ Connected to jdbc:h2:mem:play for default\n17:54:00,703 INFO  ~ Application 'playlist-2' is now started !\n17:54:01,593 INFO  ~ Rendering Start\n~~~\n\nThe 'Rendering' messages are familiar - but we have some new messages relating to the database.\n\n\nTo display the playlist from the database - here is a revised version of the dashboard controller:\n\n## app/controllers/Dashboard.java\n\n~~~\npackage controllers;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport models.Playlist;\nimport models.Song;\nimport play.Logger;\nimport play.mvc.Controller;\n\npublic class Dashboard extends Controller\n{\n  public static void index() \n  {\n    Logger.info(\"Rendering Admin\");\n    \n    List<Playlist> playlists = Playlist.findAll();\n    render (\"dashboard.html\", playlists);\n  }\n}\n~~~\n\nNotice in the above we are requesting all playlists from the database:\n\n~~~\n    List<Playlist> playlists = Playlist.findAll();\n~~~\n\nBefore sending them to the view."
    },
  
    {
    "title": " Database",
    "shortTitle": "04",
    "contentMd" : "# Database\n\nWith your application still running - visit the following url:\n\n- `http://localhost:9000/@db`\n\nThis should display this panel:\n\n![](img/04.png)\n\nPlease note - the first time your run this `JDBC URL`  field may be: \n\n- `jdbc:h2:~/test`. \n\nIf this is the case, change it to \n\n- `jdbc:h2:mem:play` \n\nas shown above. You should only need to do this once.\n\nPress `Connect`\n\n![](img/05.png)\n\nThis is a control panel for the database our application is using. This databases is 'transient' - only containing values while it is running. When the application is terminated, the database is wiped.\n\nHowever, it is a complete Relational Database - you will be exploring this type of system in semester 2.\n\nSelect 'song' in the panel in the left - and the press the green 'play' button:\n\n![](img/06.png)\n\nThis has queried the play table - and displayed the full contents.\n\nTry inspecting the other tables:\n\n\n![](img/07.png)\n![](img/08.png)\n\nCan you make sense of these tables - and relate them to the Java model classes? In particular, can you see the role of the playlist_song table? Inspect the contents closely, paying attention to the IDs."
    },
  
    {
    "title": " Exercises ",
    "shortTitle": "Exercises",
    "contentMd" : "# Exercises \n\n## Exercise 1: Download and Rename Sample Solution\n\nA complete version of the app as it should be at the end of this lab:\n\n- <https://github.com/edeleastar/playlist/releases/tag/playlist-2.end>\n\nHowever, if you already have a project called 'playlist' in Idea, then it might be confusing So, first rename the project to `playlist-2` (covered in step 1 of lab07b), and then run this command:\n\n~~~\nplay idealize\n~~~\n\n... and then open with Idea.\n\n\n## Exercise 2: New Playlist\n\nWorking only in the data.yml, create a new Playlist. If this works correctly, you should see the playlist in the dashboard just by restarting the application.\n\n## Exercise 3: Admin Panel\n\nThis is a challenging exercise - but the hints provide most of what you need.\n\nProblem: We would like an 'admin' interface to the application, which displays all the songs in the database - ignoring the playlists they belong to for the moment. The view should also display the IDs of the songs:\n\n![](img/09.png)\n\nThis is a 'hidden' view, that does not appear in the menu. It is accessed by browsing directly to:\n\n- <http://localhost:9000/admin>\n\n##Hints:\n\nYou will need a new route:\n\n~~~\nGET     /admin                                  Admin.index\n~~~\n\n... and a matching controller + view:\n\n## Admin Controller\n\n~~~\npackage controllers;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport models.Playlist;\nimport models.Song;\nimport play.Logger;\nimport play.mvc.Controller;\n\npublic class Admin extends Controller\n{\n  public static void index() \n  {\n    Logger.info(\"Rendering Admin\");\n\n    // TODO - get list of all songs, and send them to the view\n    render (\"admin.html\");\n  }\n}\n\n~~~\n\n\n## Admin view\n\n~~~\n#{extends 'main.html' /}\n#{set title:'Dashboard' /}\n\n#{menu id:\"admin\"/}\n\n  <section class=\"ui segment\">\n  <h2 class=\"ui header\">\n    All Known Songs in the Database:\n  </h2>\n  <table class=\"ui fixed table\">\n    <thead>\n      <tr>\n        <th>ID </th>\n        <th>Song</th>\n        <th>Artist</th>\n        <th>Duration</th>\n      </tr>\n    </thead>\n    <tbody>\n\n      // TODO Iterate through a list of songs and populate rows in the table.\n\n    </tbody>\n  </table>\n</section>\n~~~\n\n## Even more Hints!\n\nHow to read all songs form the Songs table:\n\n~~~\n    List<Song> songs = Song.findAll();\n~~~\n\nHow to iterate through a list of songs:\n\n~~~\n       ...\n      #{list items:songs, as:'song'}\n         ...\n         ...\n      #{/list}\n       ...\n~~~\n\nHow to get the songs from the controller to the view:\n\n~~~\n...\n  render(\"admin.html\", songs);\n...\n~~~\n\nThe solution to this exercise is provided in the next lab - but try to have a go first before working through the solution.\n"
    }
  
  ]
  }

