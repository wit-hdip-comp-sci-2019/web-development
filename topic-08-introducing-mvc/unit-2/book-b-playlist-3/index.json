


  {
  
  
  "type" : "lab",
  "title" : "Lab-08b Playlist-3",
  "img" : "book-b-playlist-3/img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Move the playlists into their own view. Introduce routes for opening the playlist and also deleting individual songs.</p>",
    
      "properties" : {},
    
    
      "folder" : "book-b-playlist-3",
    
    
      "link" : "book-b-playlist-3/index.html",
    
  "los": [
     ]
,
  "chapters" : [
  
    {
    "title": " Objectives",
    "shortTitle": "Lab-08b Playlist-3",
    "contentMd" : "# Objectives\n\nMove the playlists into their own view. Introduce routes for opening the playlist and also deleting individual songs.\n\n"
    },
  
    {
    "title": " Exercise Solutions",
    "shortTitle": "Exercise Solutions",
    "contentMd" : "# Exercise Solutions\n\n## Exercise 2: New Playlist\n\nWorking only in the data.yml, create a new Playlist. If this works correctly, you should see the playlist in the dashboard just by restarting the application.\n\n## Solution\n\n### conf/data.yml\n\n~~~\nSong(s1):\n  title: Piano Sonata No. 3\n  artist: Beethoven\n  duration: 5\nSong(s2):\n  title: Piano Sonata No. 7\n  artist: Beethoven\n  duration: 6\nSong(s3):\n  title: Piano Sonata No. 10\n  artist: Beethoven\n  duration: 8  \nSong(s4):\n  title: Piano Concerto No. 27\n  artist: Beethoven\n  duration: 8\nSong(s5):\n  title: Piano Concertos No. 17\n  artist: Beethoven\nSong(s6):\n  title: Piano Concerto No. 10\n  artist: Beethoven\n  duration: 12    \nSong(s7):\n  title: Opus 120 Thirty-three variations on a waltz by Diabelli in C major\n  artist: Beethoven\nSong(s8):\n  title: Opus 120 Thirty-three variations on a waltz by Diabelli in C major\n  artist: Beethoven\n  \nPlaylist(p1):\n  title: Bethoven Sonatas\n  duration: 19\n  songs:\n  - s1\n  - s2\n  - s3\n  \nPlaylist(p2):\n  title: Bethoven Concertos\n  duration: 23\n  songs:\n  - s4\n  - s5\n  - s6  \n  \nPlaylist(p3):\n  title: Beethoven Variations\n  duration: 26\n  songs:\n  - s7\n  - s8\n~~~\n\n\n## Exercise 2:\n\nWe would like an 'admin' interface to the application, which displays all the songs in the database - ignoring the playlists they belong to for the moment. The view should also display the IDs of the songs. This is a 'hidden' view, that does not appear in the menu. It is accessed by browsing directly to:\n\n- <http://localhost:9000/admin>\n\n### Solution\n\n## conf/routes\n\n~~~\nGET     /admin                                  Admin.index\n~~~\n\n## views/admin.html\n\n~~~\n#{extends 'main.html' /}\n#{set title:'Dashboard' /}\n\n#{menu id:\"admin\"/}\n\n  <section class=\"ui segment\">\n  <h2 class=\"ui header\">\n    All Known Songs in the Database:\n  </h2>\n  <table class=\"ui fixed table\">\n    <thead>\n      <tr>\n        <th>ID </th>\n        <th>Song</th>\n        <th>Artist</th>\n        <th>Duration</th>\n      </tr>\n    </thead>\n    <tbody>\n      #{list items:songs, as:'song'}\n        <tr>\n          <td>\n            ${song.id}\n          </td>\n          <td>\n            ${song.title}\n          </td>\n          <td>\n            ${song.artist}\n          </td>\n          <td>        \n            ${song.duration}\n          </td>        \n        </tr>\n      #{/list}\n    </tbody>\n  </table>\n</section>\n~~~\n\n## controllers/Admin.java\n\n~~~\npackage controllers;\n\nimport java.util.List;\n\nimport models.Song;\nimport play.mvc.Controller;\n\npublic class Admin extends Controller\n{\n  public static void index() {\n   List<Song> songs = Song.findAll();\n   render (\"admin.html\", songs);\n  }\n}\n~~~\n\n\n"
    },
  
    {
    "title": " Playlist Summary",
    "shortTitle": "01",
    "contentMd" : "# Playlist Summary\n\n\nWe would like to change the app to just display a list of playlists on the dashboard, not the complete contents of each playlist. Replace the current dashboard with the following:\n\n## views/dashboard.html\n\n~~~html\n#{extends 'main.html' /}\n#{set title:'Dashboard' /}\n\n#{menu id:\"dashboard\"/}\n\n#{list items:playlists, as:'playlist'}\n  <section class=\"ui segment\">\n    <h2 class=\"ui header\">\n      ${playlist.title} \n    </h2>\n      <p> Total Duration: ${playlist.duration} </p>\n    <a href=\"#\"> View </a>\n  </section>\n#{/list}\n~~~\n\nThis will render like this:\n\n![](img/01.png)\n\nThe `view` links are currently inert (try them), but we would like them to cause a new view to be rendered, containing the playlist concerned.\n\nAs each playlist has an ID generated by the database, which can make this convenient to implement. Here is a new version of the `view` link:\n\n## views/dashboard.html\n\n~~~html\n      <a href=\"/playlists/${playlist.id}\"> View </a>\n~~~\n\nWith this change in place, try hovering over each view link (without pressing it). In Chrome, keep an eye on the status bar which should show a the link including the id:\n\n![](img/02.png)\n\nHover over each link and note how the ID changes. Clicking on any link causes the following error:\n\n![](img/03.png)\n\nWe need a new controller to display a new view containing the playlist details. We will do this in the next step.\n"
    },
  
    {
    "title": " Router + Controller",
    "shortTitle": "02",
    "contentMd" : "# Router + Controller\n\nThe starting point for any new link in our app is to first define a `route` to support this link. All supported routes are defined in `config/conf`\n\n## config/conf\n\n~~~\n# Routes\n# This file defines all application routes (Higher priority routes first)\n# \n\n# Home page\nGET     /                                       Start.index\nGET     /dashboard                              Dashboard.index\nGET     /about                                  About.index\nGET     /admin                                  Admin.index\n\n# Ignore favicon requests\nGET     /favicon.ico                            404\n\n# Map static resources from the /app/public folder to the /public path\nGET     /public/                                staticDir:public\n\n# Catch all\n*       /{controller}/{action}                  {controller}.{action}\n~~~\n\nIn particular, these are the main routes currently supported:\n\n~~~html\nGET     /                                       Start.index\nGET     /dashboard                              Dashboard.index\nGET     /about                                  About.index\nGET     /admin                                  Admin.index\n~~~\n\nThese are the three patterns our app responds to: \n\n- `/`\n- `/dashboard`\n- `/about`\n- `/admin`\n\nAny other pattern will generate a `not found` error from our app.\n\nAlso note that each of these statements matches a route pattern with a function inside a controller. So, for instance, this route:\n\n~~~\nGET     /about                                  About.index\n~~~\n\n... ensures that this function would be called if the route was triggered:\n\n~~~js\npublic class About extends Controller\n{\n  public static void index() {\n    Logger.info(\"Rendering about\");\n    render (\"about.html\");\n  }\n}\n~~~\n\nReflect on this connection for a moment before proceeding.\n"
    },
  
    {
    "title": " Controller/View/Route",
    "shortTitle": "03",
    "contentMd" : "# Controller/View/Route\n\nWe have a new pattern `/playlist/id`, which we would like to route to a controller that would render a new view detailing the playlist contents:\n\n## views/dashboard.html\n\n~~~html\n...\n      <a href=\"/playlist/${playlist.id}\"> View </a>\n...\n~~~\n\nSupporting a new link link this usually requires three things:\n\n- a controller\n- a view\n- a route\n\nHere is is the new controller:\n\n## app/controllers/PlaylistCtrl.java\n\n~~~\npackage controllers;\n\nimport java.util.List;\n\nimport models.Playlist;\nimport models.Song;\nimport play.mvc.Controller;\n\npublic class PlaylistCtrl extends Controller\n{\n  public static void index(Long id)\n  {\n    render(\"playlist.html\");\n  }\n}\n~~~\n\nThis will render a view called `playlist`. This is the playlist view (for the moment):\n\n## app/views/playlist.html\n\n~~~html\n#{extends 'main.html' /}\n#{set title:'Playlist' /}\n\n#{menu id:\"dashboard\"/}\n\n<section class=\"ui segment\">\n  <h2 class=\"ui header\">\n    Playlist details...\n  </h2>\n</section>\n~~~\n\nFinally, the route:\n\n## conf/routes\n\n~~~\nGET     /playlists/{id}                         PlaylistCtrl.index\n~~~\n\nNotice that the route includes this segment: `{id}`. This means it matches any route that includes an extra wildcard segment at the end.\n\nImplement all of the above now and verify that the view is rendered as expected. i.e. when we click on a 'View' link we see the above page.\n\n"
    },
  
    {
    "title": " Playlists",
    "shortTitle": "04",
    "contentMd" : "# Playlists\n\nIn order to display the correct playlist, we need to extract the id from the url and then fetch the playlist from the model. Modify the playlist controller as follows:\n\n~~~js\n...\n\npublic class PlaylistCtrl extends Controller\n{\n  public static void index(Long id)\n  {\n    Playlist playlist = Playlist.findById(id);\n    Logger.info (\"Playlist id = \" + id);\n    render(\"playlist.html\", playlist);\n  }\n}\n~~~\n\nThe `id` from the route is passed as a parameter to the method. We use this id to get the correct playlist object:\n\n~~~\n    Playlist playlist = Playlist.findById(id);\n    Logger.info (\"Playlist id = \" + id);\n~~~\n\nRun the app and select each of the playlist links in turn. The logs will display each of the Ids as you select the playlist. A different id should be logged for each.\n\nCheck the database to verify that these IDs are correct:\n\n- <http://localhost:9000/@db>\n\nOccasionally, you may see an error like this:\n\n![](img/04.png)\n\nWhen this occurs - restart the application (Ctrl-C and the `play run` again).\n\nHere is a revised version of the Playlist view:\n\n## app/views/playlist.html\n\n~~~\n#{extends 'main.html' /}\n#{set title:'Playlist' /}\n\n#{menu id:\"dashboard\"/}\n\n<section class=\"ui segment\">\n  <h2 class=\"ui header\">\n    ${playlist.title}\n  </h2>\n  <table class=\"ui table\">\n    <thead>\n      <tr>\n        <th>Song</th>\n        <th>Artist</th>\n      </tr> \n    </thead>\n    <tbody>\n    #{list items:playlist.songs, as:'song'}\n      <tr>\n        <td>\n          ${song.title}\n        </td>\n        <td>\n          ${song.artist}\n        </td>\n      </tr>\n    #{/list}\n    </tbody>\n  </table>\n</section>\n~~~\n\nRerun the app now and verify that you can view each playlist. Check the database to confirm the IDs match.\n\nWe alrady have a `listsongs.html` partial:\n\n## app/views/tags/listsongs.html\n\n~~~\n<table class=\"ui fixed table\">\n  <thead>\n    <tr>\n      <th>Song</th>\n      <th>Artist</th>\n      <th>Duration</th>\n    </tr>\n  </thead>\n  <tbody>\n    #{list items:_playlist.songs, as:'song'}\n      <tr>\n        <td>\n          ${song.title}\n        </td>\n        <td>\n          ${song.artist}\n        </td>\n        <td>        \n          ${song.duration}\n        </td>        \n      </tr>\n    #{/list}\n  </tbody>\n</table>\n~~~\n\nWe could change the Playlist controler to call this to do the work of building the song table:\n\n\n## app/views/playlist.html\n\n~~~\n#{extends 'main.html' /}\n#{set title:'Playlist' /}\n\n#{menu id:\"dashboard\"/}\n\n<section class=\"ui segment\">\n  <h2 class=\"ui header\">\n    ${playlist.title}\n  </h2>\n  #{listsongs playlist:playlist /}\n</section>\n~~~\n\nVerify that all of this works as expected.\n\nThis last step is a little challenging to understand fully - particularly how the listsongs.html partial is parameterised by the playlist passed from playlist.html. Look carefully at these templates for a minute and try to absorb the syntax.\n\n\n\n"
    },
  
    {
    "title": " Deleting Songs 1",
    "shortTitle": "05",
    "contentMd" : "# Deleting Songs 1\n\nHaving a playlist app, without the ability to create/delete songs or playlists is clearly very limited. We have, essentially, an app that allows us to `Read` our models, but not `Create`, `Update` or `Delete` elements of the model.\n\nWe can start with providing a facility to delete songs from individual playlists. Our view will need to look like this:\n\n![](img/05.png)\n\nand pressing the delete button should remove the corresponding song.\n\nAny new button/link/action on our page requires:\n\n- an new button element in the view for each song\n- a route matching the new button element\n- a matching controller method\n\n.. and it may also involve some interaction with the model.\n\n# View\n\nThe new button must appear in each song row. Here is a revised listsongs partial:\n\n## app/views/tags/listsongs.html\n\n~~~html\n<table class=\"ui fixed table\">\n  <thead>\n    <tr>\n      <th>Song</th>\n      <th>Artist</th>\n      <th>Duration</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    #{list items:_playlist.songs, as:'song'}\n      <tr>\n        <td>\n          ${song.title}\n        </td>\n        <td>\n          ${song.artist}\n        </td>\n        <td>        \n          ${song.duration}\n        </td>      \n         <td>\n            <a href=\"/playlists/${_playlist.id}/deletesong/${song.id}\" class=\"ui tiny red button\">Delete Song</a>\n         </td>         \n      </tr>\n    #{/list}\n  </tbody>\n</table>\n~~~\n\nLook at the new element\n\n~~~\n         <td>\n            <a href=\"/playlists/${_playlist.id}/deletesong/${song.id}\" class=\"ui tiny red button\">Delete Song</a>\n         </td>         \n~~~\n\nIt is just an `<a>` element - styled to look like a button. The `href` is manufactured to include the ids of both the playlist + the song. So it might be:\n\n~~~\n... href=\"/playlists/123/deletesong/321\" ...\n~~~  \n\n... where 123 is the id of the playlist, and 321 is the id of the song.\n\n# Route\n\nWe now need a new route - containing both the playlist and song id - and linking to a new method in the playlist controller:\n\n## conf/routes\n\n~~~js\nGET     /playlists/{id}/deletesong/{songid}     PlaylistCtrl.deleteSong\n~~~\n\n# Controller\n\nThis is the new method to handle this route:\n\n## app/ontrollers/PlaylistCtrl.java\n\n~~~js\n...\n  public static void deletesong (Long id, Long songid)\n  {\n    Playlist playlist = Playlist.findById(id);\n    Song song = Song.findById(songid);\n    Logger.info (\"Removing\" + song.title);\n\n    render(\"playlist.html\", playlist);\n  }\n...\n~~~\n\nTry all of this now - and verify that the logs shows the attempt to delete the song when the button is pressed.\n\nWe havent yet deleted the song - we will leave that to the next step.\n\nTo summarise, for every song we are generating a `delete` button. This button's href contains the id of the playlist + the song we want to delete. When the user presses this button, it triggers a call to our new Controller method. This method is then able to locate the playlist/song in the database using the IDs from the route.\n\n"
    },
  
    {
    "title": " Delete Song 2",
    "shortTitle": "06",
    "contentMd" : "# Delete Song 2\n\nThis is our deleteSong method:\n\n~~~\n  public static void deletesong (Long id, Long songid)\n  {\n    Playlist playlist = Playlist.findById(id);\n    Song song = Song.findById(songid);\n    Logger.info (\"Removing\" + song.title);\n\n    render(\"playlist.html\", playlist);\n  }\n~~~\n\nNote that we have 2 ids:\n\n- id of the playlist\n- id of the song in the playlist (songid)\n\nThese ids are generated by this link:\n\n~~~\n <a href=\"/playlists/${playlist.id}/deletesong/${song.id}\" class=\"ui tiny red button\">Delete Song</a>\n~~~\n\nAnnd are interpreted by this route:\n\n~~~js\nGET     /playlists/{id}/deletesong/{songid}     PlaylistCtrl.deleteSong\n~~~\n\nFollow carefully the `id` and `songid` identifiers in the above.\n\nTo actually delete the song, we need to remove it from the playlist songs collection + delete from the database:\n\n~~~\n  public static void deletesong (Long id, Long songid)\n  {\n    Playlist playlist = Playlist.findById(id);\n    Song song = Song.findById(songid);\n    Logger.info (\"Removing\" + song.title);\n    playlist.songs.remove(song);\n    playlist.save();\n    song.delete();\n    render(\"playlist.html\", playlist);\n  }\n~~~\n\n\nTry this now - and make sure the songs are removed. Also, check that they are removed from the database table."
    },
  
    {
    "title": " Exercises",
    "shortTitle": "Exercises",
    "contentMd" : "# Exercises\n\n## Exercise 1: Download and Rename Sample Solution\n\nA complete version of the app as it should be at the end of this lab:\n\n- <https://github.com/edeleastar/playlist/releases/tag/playlist.3.end>\n\nHowever, if you already have a project called 'playlist' in Idea, then it might be confusing So, first rename the project to `playlist-2` (covered in step 1 of lab07b), and then run this command:\n\n~~~\nplay idealize\n~~~\n\n... and then open with Idea.\n\n## Exercise 2: UX Enhancements\n\nIntroduce a 'Delete Playlist' button for each playlist, represented by a `trash` icon. E.g:\n\n![](img/06.png)\n\nIn addition, the `view` link is replace by a `folder open` icon. You can learn how to use these icons in Semantic UI here:\n\n- <https://semantic-ui.com/elements/icon.html>\n\nBind the `delete playlist` button to a new function to be implemented in the Dashboard controller, which should log the id of the playlist to be deleted.\n\n## Exercise 3: Delete Playlist Functionality\n\nMake the button actually delete the denoted playlist.\n\n"
    }
  
  ]
  }

