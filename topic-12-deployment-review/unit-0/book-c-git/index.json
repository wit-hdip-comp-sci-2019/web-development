


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-12b Git Workflow",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Rebuild Todolist - this time committing to git version control as the app is composed using Sourcetree</p>",
  "folder" : "book-c-git",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Objectives",
    "shortTitle": "Lab-12b Git Workflow",
    "contentMd" : "# Objectives\n\nRebuild Todolist - this time committing to git version control as the app is composed using Sourcetree\n"
    },
  
    {
    "title": "# todolist-versioned Project",
    "shortTitle": "01",
    "contentMd" : "# todolist-versioned Project\n\nWe should have our project in Sourcetree from the last lab:\n\n![](img/001.png)\n\nWe would like to use Intellj Idea - we can 'idealize' then app:\n\n~~~\nplay idealize\n~~~\n\n... and then import into Idea.\n\nFor this lab, keep both Idea & Sourcetree open at the same time.\n\nThe first thing to notice is the Sourcetree view will have changed slightly: \n\n![](img/002.png)\n\nThis is because the idealize command as generated some new files in our project:\n\n- todo-list-versioned.iml\n- todo-list-versioned.ipr\n- todo-list-versioned.iws\n\nThese are configuration file for Idea. We dont need to be concerned with them, and we dont want them committed to our repository as they are not code really. We need to tell git to ignore them.\n\nThe built in mechanism for ignoring files in git is to plate the file names, or patterns, in a file called `.gitignore`. We already have one:\n\n## .gitgnore\n\n~~~bash\n.settings\neclipse\ndocumentation\ntmp\n.classpath\n.project\n~~~\n\nEdit it now in Idea - and append paths to ignore the Idea files:\n\n~~~\n...\n*.iml\n*.ipr\n*.iws\n~~~\n\nSave this file - and review the Sourcetree view again:\n\n![](img/003.png)\n\nThe change is subtle - git is no longer 'tracking' the idea files, but notice that it reporting the one of the files we are tracking - .gitignore - is showing up as having a change.\n\nThis change is noted, but not 'staged' or 'committed' yet. We will do both now\n\nTo stage the changes, we just select all the 'Unstaged files' check box - which reconfigures the view like this:\n\n![](img/004.png)\n\nEnter the commit message 'ignore idea files' as shown and press commit\n\nOnce committed, a small badge will appear over the 'Push' button in the toolbar. This is because changes we have just made locally are not yet replicated on the github (remote) version:\n\n![](img/005.png)\n\nPress push now - and the repositories will be 'synced'\n\n![](img/006.png)\n\nFor each step in this lab we will be proceeding through this workflow:\n\n- Make some changes to the project\n- Stage the changes\n- Commit the changes\n- Push them to the remote repository\n- Check to see if they have arrived (sometimes).\n\n\n\n\n"
    },
  
    {
    "title": "# Model",
    "shortTitle": "02",
    "contentMd" : "# Model\n\nWe can bring in a Todo model now:\n\n## app/models/Todo.java\n\n~~~\npackage models;\n\nimport play.db.jpa.Model;\n\nimport javax.persistence.Entity;\n\n@Entity\npublic class Todo extends Model\n{\n  public String title;\n\n  public Todo(String title)\n  {\n    this.title = title;\n  }\n}\n~~~\n\nWhen you add a new class in Idea, you may get this prompt:\n\n![](img/007.png)\n\nThis is triggered because the project is a git repo now - and Idea can look after the stage/commit/push process we have just been through in Sourcetree. For this lab we will prefer to gain more experience using Sourcetree, so we will disable this feature and press 'cancel'.\n\nAs soon as we saved the class in Idea, notice the changes have been detected in Sourcetree:\n\n![](img/008.png)\n\nWe can stage, commit and push whenever we like - usually we stage and commit when we have introduced a significant change. We would only push occasionally.\n\nLets stage and commit now with the message 'Todo model class introduced'\n\n![](img/img/009.png)\n![](img/img/010.png)\n\nWe might also push :\n\n![](img/011.png)\n\n![](img/012.png)\n\nOn the github version of the repo, locate the 'commits' page, and verify that it is in sync with your local version:\n\n![](img/013.png)\n"
    },
  
    {
    "title": "# Dashboard Controller + View",
    "shortTitle": "03",
    "contentMd" : "# Dashboard Controller + View\n\nHere is a new version of the Dashboard controller + view:\n\n## app/controllers/Dashboard.java\n\n~~~\npackage controllers;\n\nimport models.Todo;\nimport play.Logger;\nimport play.mvc.Controller;\n\nimport java.util.List;\n\npublic class Dashboard extends Controller\n{\n  public static void index()\n  {\n    Logger.info(\"Rendering Dashboard\");\n    List<Todo> todolist = Todo.findAll();\n    render(\"dashboard.html\", todolist);\n  }\n\n  public static void addTodo(String title)\n  {\n    Todo todo = new Todo(title);\n    todo.save();\n    Logger.info(\"Addint Todo\" + title);\n    redirect(\"/dashboard\");\n  }\n}\n~~~\n\n\n## app/views/dashboard.html\n\n~~~\n#{extends 'main.html' /}\n#{set title:'Dashboard' /}\n\n#{menu id:\"dashboard\"/}\n\n<section class=\"ui raised segment\">\n  <header class=\"ui header\">\n    Todo List\n  </header>\n  <table class=\"ui fixed table\">\n    <thead>\n    <tr>\n      <th>Todo</th>\n      <th></th>\n    </tr>\n    </thead>\n    <tbody>\n    <div class=\"ui bulleted list\">\n    #{list items:todolist, as:'todo'}\n    <tr>\n      <td> ${todo.title} </td>\n    #{/list}\n    </div>\n    </tbody>\n  </table>\n\n</section>\n\n<form class=\"ui stacked segment form\" action=\"/dashboard/addtodo\" method=\"POST\">\n  <div class=\"field\">\n    <label>Title</label>\n    <input placeholder=\"Title\" type=\"text\" name=\"title\">\n  </div>\n  <button class=\"ui blue submit button\">Add Todo</button>\n</form>\n~~~\n\nRun the app now - and verify that you can add todos.\n\nStage & Commit these changes - note the message used below:\n\n![](img/014.png)\n![](img/015.png)\n![](img/016.png)\n\n\n\n"
    },
  
    {
    "title": "# Delete Todo Support",
    "shortTitle": "04",
    "contentMd" : "# Delete Todo Support\n\nNow we can introduce delete support\n\n## conf/routes\n\n~~~\nGET     /dashboard/deletetodo/{id}              Dashboard.deleteTodo\n~~~\n\n## app/controlers/Dashboard.java\n\n~~~\n  public static void deleteTodo(Long id)\n  {\n    Todo todo = Todo.findById(id);\n    todo.delete();\n    Logger.info(\"Deleting \" + todo.title);\n    redirect(\"/dashboard\");\n  }\n~~~\n\n## app/views/dashboard.html\n\nRevised list to include delete button:\n\n~~~\n...\n      #{list items:todolist, as:'todo'}\n      <tr>\n        <td> ${todo.title} </td>\n        <td> <a href=\"/dashboard/deletetodo/${todo.id} \" class=\"ui tiny red button\"> Delete </a> </td>\n      #{/list}\n..\n~~~\n\nStage and commit the above - use the commit message:\n\n~~~bash\nintroduced delete todo support\n~~~\n\n![](img/017.png)\n![](img/018.png)"
    },
  
    {
    "title": "# UX Modifications",
    "shortTitle": "05",
    "contentMd" : "# UX Modifications\n\nThe app is still branded as 'Template 1' - we can change this now:\n\n## app/views/tags/menu.html\n\n~~~\n...\n  <header class=\"ui header item\"> <a href=\"/\"> Todolist V1 </a></header>\n...\n~~~\n\n## app/views/about.html\n\n~~~\n...\n  <p>\n    A simple Todo List Application\n  </p>\n...  \n~~~\n\n## app/views/start.html\n\n~~~\n...\n  <h1 class=\"ui header\">\n    Welcome to Todolist V1\n  </h1>\n  <p>\n    Track your todos today!\n  </p>\n...\n~~~\n\nStage and commit all of the above.\n\nWe also might like to `Tag` this version as being significant - perhaps call it 'V1'. This will enable is to get back the this version later more easily.\n\nTo do this, first make sure you have 'pushed' all updates to github. Then select the most recent change and right clock to select the context menu:\n\n![](img/019.png)\n\nSelect 'Tag' and in the subsequent dialog:\n\n![](img/020.png)\n\n.. Enter 'V1'. Also, check the 'Push Tag' check box in the dialog as shown above. Then press add.\n\nA 'V1 tag' should now be visible in the commit history:\n\n![](img/021.png)\n\nIf you visit the repo on github - then this version will be marked as a `Release` called V1:\n\n![](img/022.png)\n\n"
    },
  
    {
    "title": "# Member Model",
    "shortTitle": "06",
    "contentMd" : "# Member Model\n\nIntroducing accounts we need a new model:\n\n## app/models/Member.java\n\n~~~\npackage models;\n\nimport play.db.jpa.Model;\n\nimport javax.persistence.CascadeType;\nimport javax.persistence.Entity;\nimport javax.persistence.OneToMany;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Entity\npublic class Member extends Model\n{\n  public String firstname;\n  public String lastname;\n  public String email;\n  public String password;\n\n  @OneToMany(cascade = CascadeType.ALL)\n  public List<Todo> todolist = new ArrayList<Todo>();\n\n  public Member(String firstname, String lastname, String email, String password)\n  {\n    this.firstname = firstname;\n    this.lastname = lastname;\n    this.email = email;\n    this.password = password;\n  }\n\n  public static Member findByEmail(String email)\n  {\n    return find(\"email\", email).first();\n  }\n\n  public boolean checkPassword(String password)\n  {\n    return this.password.equals(password);\n  }\n}\n~~~\n\nWe can also bring in a data file to preload the model:\n\n## conf/data.yml\n\n~~~\nTodo(t1):\n  title: Make tea\n\nTodo(t2):\n  title: Go for snooze\n\nTodo(t3):\n  title: Make more tea\n\nMember(m1):\n  firstname: homer\n  lastname: simpson\n  email: homer@simpson.com\n  password: secret\n  todolist:\n  - t1\n  - t2\n\nMember(m2):\n  firstname: marge\n  lastname: simpson\n  email: marge@simpson.com\n  password: secret\n  todolist:\n  - t3\n~~~\n\nWe then need a new class to load this model:\n\n## app/Bootstrap.java\n\n~~~\nimport java.util.List;\n\nimport play.*;\nimport play.jobs.*;\nimport play.test.*;\n\nimport models.*;\n\n@OnApplicationStart\npublic class Bootstrap extends Job\n{\n  public void doJob()\n  {\n    if (Member.count() == 0)\n    {\n      Fixtures.loadModels(\"data.yml\");\n    }\n  }\n}\n~~~\n\nStage and commit these changes now with a suitable message.\n\n\n"
    },
  
    {
    "title": "# Accounts Views",
    "shortTitle": "07",
    "contentMd" : "# Accounts Views\n\nWe need a number of new views to support login/signup:\n\n## app/views/tags/welcomemenu.html\n\n~~~\n<nav class=\"ui menu\">\n  <header class=\"ui header item\"> <a href=\"#\"> Todo List </a></header>\n  <div class=\"right menu\">\n    <a id=\"signup\" class=\"item\" href=\"/signup\"> Signup  </a>\n    <a id=\"login\" class=\"item\" href=\"/login\">  Login   </a>\n  </div>\n</nav>\n\n<script>\n  $(\"#${_id}\").addClass(\"active item\");\n</script>\n~~~\n\n## app/views/login.html\n\n~~~\n#{extends 'main.html' /}\n#{set title:'login' /}\n#{welcomemenu id:\"login\"/}\n\n<div class=\"ui two column middle aligned grid basic segment\">\n  <div class=\"column\">\n    <form class=\"ui stacked segment form\" action=\"/authenticate\" method=\"POST\">\n      <h3 class=\"ui header\">Log-in</h3>\n      <div class=\"field\">\n        <label>Email</label> <input placeholder=\"Email\" name=\"email\">\n      </div>\n      <div class=\"field\">\n        <label>Password</label> <input type=\"password\" name=\"password\">\n      </div>\n      <button class=\"ui blue submit button\">Login</button>\n    </form>\n  </div>\n  <div class=\"column\">\n    <img class=\"ui image\" src=\"/public/images/todo-2.jpg\">\n  </div>\n</div>\n~~~\n\n## app/views/signup.html\n\n~~~\n#{extends 'main.html' /}\n#{set title:'Signup' /}\n#{welcomemenu id:\"signup\"/}\n\n<div class=\"ui two column grid basic middle aligned segment\">\n  <div class=\"column\">\n    <form class=\"ui stacked segment form\" action=\"/register\" method=\"POST\">\n      <h3 class=\"ui header\">Register</h3>\n      <div class=\"two fields\">\n        <div class=\"field\">\n          <label>First Name</label>\n          <input placeholder=\"First Name\" type=\"text\" name=\"firstname\">\n        </div>\n        <div class=\"field\">\n          <label>Last Name</label>\n          <input placeholder=\"Last Name\" type=\"text\" name=\"lastname\">\n        </div>\n      </div>\n      <div class=\"field\">\n        <label>Email</label>\n        <input placeholder=\"Email\" type=\"text\" name=\"email\">\n      </div>\n      <div class=\"field\">\n        <label>Password</label>\n        <input type=\"password\" name=\"password\">\n      </div>\n      <button class=\"ui blue submit button\">Submit</button>\n    </form>\n  </div>\n  <div class=\"column\">\n    <img class=\"ui image\" src=\"/public/images/todo-1.png\">\n  </div>\n</div>\n~~~\n\nIn addition, the start view needs to be changed to include the welcomemenu instead of the main menu:\n\n## app/views/start.html\n\n~~~\n...\n#{welcomemenu id:\"start\"/}\n...\n~~~\n\nFinally, the dashboard view will need a different delete button:\n\n## app/views/dashboard.html\n\n~~~\n...\n      <td> <a href=\"/dashboard/${member.id}/deletetodo/${todo.id} \" class=\"ui tiny red button\"> Delete </a> </td>\n...\n~~~\n\n(This  replaces the existing delete button).\n\nThis app is not in a stable state now - so we will not commit it. In general, we only commit when we have specifics features (or fixes) completed. If the app is not currently working correctly, we hold off committing until the next feature is working (even if this feature is very minor).\n\n"
    },
  
    {
    "title": "# Accounts Routes + Controllers",
    "shortTitle": "08",
    "contentMd" : "# Accounts Routes + Controllers\n\nTo finish the upgrade to accounts - we need this revised routes file (replace the existing one):\n\n## conf/routes\n\n~~~\n# Routes\n# This file defines all application routes (Higher priority routes first)\n# ~\n\nGET     /                                       Start.index\n\n# Accounts\nGET    /signup                                  Accounts.signup\nGET    /login                                   Accounts.login\nPOST   /register                                Accounts.register\nPOST   /authenticate                            Accounts.authenticate\nGET    /logout                                  Accounts.logout\n\n# Home page\nGET     /dashboard                              Dashboard.index\nGET     /dashboard/{id}/deletetodo/{todoid}     Dashboard.deleteTodo\nGET     /about                                  About.index\n\n# Ignore favicon requests\nGET     /favicon.ico                            404\n\n# Map static resources from the /app/public folder to the /public path\nGET     /public/                                staticDir:public\n\n# Catch all\n*       /{controller}/{action}                  {controller}.{action}\n\n~~~ \n\n\nThis new controller:\n\n## app/controllers/Accounts.java\n\n~~~\npackage controllers;\n\nimport models.Member;\nimport play.Logger;\nimport play.mvc.Controller;\n\npublic class Accounts extends Controller\n{\n  public static void signup()\n  {\n    render(\"signup.html\");\n  }\n\n  public static void login()\n  {\n    render(\"login.html\");\n  }\n\n  public static void register(String firstname, String lastname, String email, String password)\n  {\n    Logger.info(\"Registering new user \" + email);\n    Member member = new Member(firstname, lastname, email, password);\n    member.save();\n    redirect(\"/\");\n  }\n\n  public static void authenticate(String email, String password)\n  {\n    Logger.info(\"Attempting to authenticate with \" + email + \":\" + password);\n\n    Member member = Member.findByEmail(email);\n    if ((member != null) && (member.checkPassword(password) == true)) {\n      Logger.info(\"Authentication successful\");\n      session.put(\"logged_in_Memberid\", member.id);\n      redirect (\"/dashboard\");\n    } else {\n      Logger.info(\"Authentication failed\");\n      redirect(\"/login\");\n    }\n  }\n\n  public static void logout()\n  {\n    session.clear();\n    redirect (\"/\");\n  }\n\n  public static Member getLoggedInMember()\n  {\n    Member member = null;\n    if (session.contains(\"logged_in_Memberid\")) {\n      String memberId = session.get(\"logged_in_Memberid\");\n      member = Member.findById(Long.parseLong(memberId));\n    } else {\n      login();\n    }\n    return member;\n  }\n}\n~~~\n\nThis is a new version of Dashboard:\n\n## app/controllers/Dashboard.java\n\n~~~\npackage controllers;\n\nimport models.Member;\nimport models.Todo;\nimport play.Logger;\nimport play.mvc.Controller;\n\nimport java.util.List;\n\npublic class Dashboard extends Controller\n{\n  public static void index()\n  {\n    Logger.info(\"Rendering Dashboard\");\n    Member member = Accounts.getLoggedInMember();\n    List<Todo> todolist = member.todolist;\n    render(\"dashboard.html\", member, todolist);\n  }\n\n  public static void addTodo(String title)\n  {\n    Member member = Accounts.getLoggedInMember();\n    Todo todo = new Todo(title);\n    member.todolist.add(todo);\n    member.save();\n    Logger.info(\"Adding Todo\" + title);\n    redirect(\"/dashboard\");\n  }\n\n  public static void deleteTodo(Long id, Long todoid)\n  {\n    Member member = Member.findById(id);\n    Todo todo = Todo.findById(todoid);\n    member.todolist.remove(todo);\n    member.save();\n    todo.delete();\n    Logger.info(\"Deleting \" + todo.title);\n    redirect(\"/dashboard\");\n  }\n}\n~~~\n\nSee if the app runs now as expected, and that the todo items are kept separate by user. Also verify that we can delete  todos.\n\nStage and commit all changes in this step - and tag this version 'V2'.\n\n![](img/023.png)\n\n\n\n\n\n\n"
    },
  
    {
    "title": "# Exercises",
    "shortTitle": "Exercises",
    "contentMd" : "# Exercises\n\nYour repo should be structured something like this one now:\n\n- <https://github.com/wit-hdip-comp-sci-2019/todolist-versioned>\n\n## Exercise 1: Running an Earlier Version\n\nIn Sourcetree, select the `V1` tagged commit, right click and select `Reset master to this commit` as shown here:\n\n![](img/024.png)\n\nIn the subsequent dialog, select 'Hard - diacard all working copy changes'\n\n![](img/025.png)\n\nYou will get a warning - which you can accept:\n\n![](img/026.png)\n\nThe project folder will now contain the V1 project. \n\n![](img/029.png)\n\nYou can run this version now - and make sure it is that version (no member support)\n\nPlease note you cant really edit this version - or if you do it will involve creating a new branch from this point (something you will learn about later).\n\n## Exercise 2: Get back to the latest version\n\nSee if you can get back to V2 - it is more or less the same procedure as getting to V1, but in reverse.\n\n## Exercise 3: : Logout & Images\n\nThe logout feature is missing from the menu. Also, the images assets are missing. Locate these form the Lab 10. Once you have the feature implemented, commit and push the modifications (with a suitable message).\n\n"
    }
  
  ]
  }

