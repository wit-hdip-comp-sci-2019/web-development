


  {
  
  
  "type" : "lab",
  "title" : "Lab-07b Playlist 1",
  "img" : "book-c-playlist-1/img/main.jpg",
  "videoid" : "1qXvIIhGN9g",
  "objectives" : "<p>Import, rename and run a new starter project. Extend the project to include a Model. (Note: the video shows java + play revisions a little behind your current installation)</p>",
    
      "properties" : {},
    
    
      "folder" : "book-c-playlist-1",
    
    
      "link" : "book-c-playlist-1/index.html",
    
  "los": [
     ]
,
  "chapters" : [
  
    {
    "title": " Objectives",
    "shortTitle": "Lab-07b Playlist 1",
    "contentMd" : "# Objectives\n\nImport, rename and run a new starter project. Extend the project to include a Model. (Note: the video shows java + play revisions a little behind your current installation)\n"
    },
  
    {
    "title": " Creating a Play App",
    "shortTitle": "01",
    "contentMd" : "# Creating a Play App\n\n## Create New Project\n\nCreate a new play project - this time using a different procedure from the first lab. Open a shell and enter the following:\n\n~~~bash\ngit clone https://github.com/wit-hdip-comp-sci-2019/play-template-1\n~~~\n\nThe shell should show something like this:\n\n~~~bash\nCloning into 'play-template-1'...\nremote: Counting objects: 66, done.\nremote: Compressing objects: 100% (47/47), done.\nremote: Total 66 (delta 9), reused 66 (delta 9), pack-reused 0\nUnpacking objects: 100% (66/66), done.\n~~~\n\n## Rename Project\n\nThe default name of the project should be changed now. This will require the following procedure:\n\n- Rename the folder `play-template-1`. Call the folder `playlist` instead.\n- Use Sublime Text to edit the file: `playlist/conf/application.conf`. The first three lines contains the following:\n\n    ~~~bash\n    # This is the main configuration file for the application.\n    # ~~\n    application.name=play-template-1\n    ~~~\n\n- Change `play-template-1` above to `playlist`, and save the file:\n\n    ~~~bash\n    # This is the main configuration file for the application.\n    # ~~\n    application.name=playlist\n    ~~~\n\n## Import into Idea\n\nStill in the shell, and in the project folder enter the following command:\n\n~~~\nplay idealize\n~~~\n\nYou should get this response:\n\n~~~\n~        _            _\n~  _ __ | | __ _ _  _| |\n~ | '_ \\| |/ _' | || |_|\n~ |  __/|_|\\____|\\__ (_)\n~ |_|            |__/\n~\n~ play! 1.5.2, https://www.playframework.com\n~\n~ OK, the application is ready for Intellij Idea\n~ Use File, Open Project... to open \"playlist.ipr\"\n~\n~~~\n\nNow we can import the project into Idea. Launch Idea, and select `File->Open`. Select the Directory containing the project you have just created (play-template-1)\n\n![](img/17.png)\n\n(Again - you may need to press the button on the extreme bottom left to get the view shown above)\n\nExplore the `controllers` and `views` folders - examining each file.\n"
    },
  
    {
    "title": " Running a Play Application",
    "shortTitle": "02",
    "contentMd" : "# Running a Play Application\n\nInside the project folder, enter the following command in the shell/command prompt:\n\n~~~\nplay run\n~~~\n\nWhich should respond with:\n\n~~~\n~        _            _\n~  _ __ | | __ _ _  _| |\n~ | '_ \\| |/ _' | || |_|\n~ |  __/|_|\\____|\\__ (_)\n~ |_|            |__/\n~\n~ play! 1.5.2, https://www.playframework.com\n~\n~ Ctrl+C to stop\n~\n~ using java version \"1.8.0_162\"\nListening for transport dt_socket at address: 8000\n17:50:30,555 INFO  ~ Starting /Users/edeleastar/dev/play-template-1\n17:50:30,658 WARN  ~ You're running Play! in DEV mode\n17:50:30,760 INFO  ~ Listening for HTTP on port 9000 (Waiting a first request to start) ...\n~ Server is up and running\n~~~\n\nNavigate now to:\n\n- <http://localhost:9000>\n\nYou should see view like these:\n\n![](img/03.png)\n![](img/04.png)\n![](img/05.png)\n\nTo stop the application, enter Ctrl+C in the shell:\n\n![](img/14.png)\n\nThis will stop the application. Try\n\n- <http://localhost:9000>\n\n... and try again, and verify that the app has now stopped.\n\nPractice starting and stopping the app."
    },
  
    {
    "title": " Playlist Branding",
    "shortTitle": "03",
    "contentMd" : "# Playlist Branding\n\nWe are going to evolve this project into a simple playlist maker, enabling a user to create a playlist of songs.\n\nFirst, we can make some simple changes to rebrand the app as `Playlist` instead of `Template 1`\n\nEdit the following files and make the changes as shown:\n\n## views/tags/menu.html\n\n~~~html\n...\n  <header class=\"ui header item\"> <a href=\"/\"> Playlist </a></header>\n...\n~~~\n\n## views/about.html\n\n~~~html\n...\n<p>\n  A Little Playlist Maker - Version 1\n</p>\n...\n~~~\n\n## views/start.html\n\n~~~html\n...\n<h1 class=\"ui header\">\n  Welcome to Playlist 1\n</h1>\n<p>\n  A small app to let you compose playlists.\n</p>\n...\n~~~\n\nRun the app (it may be still running). Check out the new 'branding'. Make sure the menu operates as expected.\n\n"
    },
  
    {
    "title": " Static Playlist",
    "shortTitle": "04",
    "contentMd" : "# Static Playlist\n\nIn this step we will start to display the playlist itself. First, introduce new partial called `listsongs.html`:\n\n## views/tags/listsongs.html\n\n~~~html\n<table class=\"ui fixed table\">\n  <thead>\n    <tr>\n      <th>Song</th>\n      <th>Artist</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n      </td>\n      <td>\n      </td>\n  </tbody>\n</table>\n~~~\n\nNow change the dashboard view to invoke this partial:\n\n## views/dashboard.html\n\n~~~html\n#{extends 'main.html' /}\n#{set title:'Dashboard' /}\n\n#{menu id:\"dashboard\"/}\n\n<section class=\"ui segment\">\n  <h2 class=\"ui header\">\n    Playlist Title\n  </h2>\n  #{listsongs/}\n</section>\n~~~\n\nMake sure the app runs successfully. The table will be empty.\n\nTo test out the UX, we might include some actual songs (replace the `<tbody>` of listsongs with the following):\n\n## views/tags/listsongs.html\n\n~~~html\n<tbody>\n  <tr>\n    <td>\n      Piano Sonata No. 3\n    </td>\n    <td>\n      Beethoven\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Piano Sonata No. 7\n    </td>\n    <td>\n      Beethoven\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Piano Sonata No. 10\n    </td>\n    <td>\n      Beethoven\n    </td>\n  </tr>\n</tbody>\n~~~\n\n... and also give the playlist a title in dashboard:\n\n## views/dashboard.html\n\n~~~html\n....\n  <h2 class=\"ui header\">\n    Beethoven Sonatas\n  </h2>\n...\n~~~\n\nExercise the UX fully again. Make sure the playlist above is being displayed. \n\nKeep an eye on the shell (console) used to launch the app:\n\n![](img/12.png)\n\nLocate where in the controllers these messages are being generated:\n\n~~~js\n...\n    Logger.info(\"Rendering Dashboard\");\n...\n~~~\n\nThese logging messages are a useful technique for figuring out what might be going wrong with an app. There are three variants of the logging statement: `info`, `error` and `debug`. Experiment now with some of these, and exercise the app to make sure the log messages appear.\n\n~~~js\n...\n    Logger.Error(\"some error has occurred\");\n...\n~~~\n\n~~~js\n...\n    Logger.debug(\"some step has occurred...\");\n...\n~~~\n\nIntroduce some of the above log statements, and verify that they appear as expected on the console.\n"
    },
  
    {
    "title": " Playlist Model",
    "shortTitle": "05",
    "contentMd" : "# Playlist Model\n\nThe app as we have it now could have been completely built as a static web site. However, the framework and tools we have used in this version enable us to evolve this static site into an interactive app\n\n## Model Classes\n\nWe can introduce 'model' classes to implement the playlist in our app. Introduce these two new classes into the `models` package:\n\n## app/models/Song.java\n\n~~~\npackage models;\n\npublic class Song\n{\n  public String title;\n  public String artist;\n  \n  public Song(String title, String artist)\n  {\n    this.title = title;\n    this.artist = artist;\n  }\n}\n~~~\n\n## app/models/Playlist.java \n\n~~~\npackage models;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Playlist\n{\n  public String title;\n  public List<Song> songs = new ArrayList<Song>();\n\n  public Playlist(String title)\n  {\n    this.title = title;\n  }\n}\n~~~\n\n## Controller\n\nIn the Dashboard controller, we can define a playlist object in Java, add some songs, and send to the view:\n\n~~~js\npackage controllers;\n\nimport models.Playlist;\nimport models.Song;\nimport play.Logger;\nimport play.mvc.Controller;\n\npublic class Dashboard extends Controller\n{\n  public static void index() {\n    Logger.info(\"Rendering Dashboard\");\n    \n    Song s1 = new Song(\"Piano Sonata No. 3\", \"Beethoven\");\n    Song s2 = new Song(\"Piano Sonata No. 7\", \"Beethoven\");\n    Song s3 = new Song(\"Piano Sonata No. 10\", \"Beethoven\");\n    Playlist playlist = new Playlist(\"Beethoven Sonatas\");\n    playlist.songs.add (s1);\n    playlist.songs.add (s2);\n    playlist.songs.add (s3);\n    \n    render (\"dashboard.html\", playlist);\n  }\n}\n~~~\n\n## Views\n\nThe next step is to eliminate some of the static content from the listsongs partial. Here is a new version to replace the current version:\n\n## views/tags/listsongs.html\n\n~~~html\n<table class=\"ui fixed table\">\n  <thead>\n    <tr>\n      <th>Song</th>\n      <th>Artist</th>\n    </tr>\n  </thead>\n  <tbody>\n    #{list items:_playlist.songs, as:'song'}\n      <tr>\n        <td>\n          ${song.title}\n        </td>\n        <td>\n          ${song.artist}\n        </td>\n      </tr>\n    #{/list}\n  </tbody>\n</table>\n~~~\n\nIn the above, we are `iterating` over an `array` of `songs` inside a `playlist` object\n\nHere is a new version of the dashboard, which will have to pass the playlist to the partial :\n\n## app/views/dashboard.html\n\n~~~\n#{extends 'main.html' /}\n#{set title:'Dashboard' /}\n\n#{menu id:\"dashboard\"/}\n\n<section class=\"ui segment\">\n  <h2 class=\"ui header\">\n    Beethoven Sonatas\n  </h2>\n  #{listsongs playlist:playlist/}\n</section>\n~~~\n\nThis playlist object, in turn, must be passed to the dashboard controller for this to work. We already did this in the Dashboard conntroller.\n\nRun the app now - and verify that you can see the playlists.\n"
    },
  
    {
    "title": " Multiple playlists",
    "shortTitle": "06",
    "contentMd" : "# Multiple playlists\n\nHere is a revised Dashboard index method:\n\n## app/controllers/dashboard.java\n\n~~~\n...\n  public static void index() {\n    Logger.info(\"Rendering Dashboard\");\n    \n    Song s1 = new Song(\"Piano Sonata No. 3\", \"Beethoven\");\n    Song s2 = new Song(\"Piano Sonata No. 7\", \"Beethoven\");\n    Song s3 = new Song(\"Piano Sonata No. 10\", \"Beethoven\");\n    Playlist p1 = new Playlist(\"Beethoven Sonatas\");\n    p1.songs.add (s1);\n    p1.songs.add (s2);\n    p1.songs.add (s3);\n    \n    Song s4 = new Song(\"Piano Concerto No. 1\", \"Beethoven\");\n    Song s5 = new Song(\"Piano Concerto No. 12\", \"Beethoven\");\n    Song s6 = new Song(\"Piano Concerto No. 23\", \"Beethoven\");\n    Playlist p2 = new Playlist(\"Beethoven Concertos\");\n    p2.songs.add (s4);\n    p2.songs.add (s5);\n    p2.songs.add (s6);\n    \n    List<Playlist> playlists = new ArrayList<Playlist>();\n    playlists.add(p1);\n    playlists.add(p2);\n    \n    render (\"dashboard.html\", playlists);\n  }\n...\n~~~\n\nThe above code will have errors - unless you import these libraries:\n\n~~~\nimport java.util.ArrayList;\nimport java.util.List;\n~~~\n\nBefore pasting in the above code - try to use the Eclipse autocorrect feature in insert them automatically.\n\nNotice that we are now creating 2 playlists: p1 and p2. Each of these contains 3 songs. Read this code carefully and make sure you can understand the data structure.\n\nHere is a new version of the dashboard view:\n\n## app/views/dashboard.html\n\n~~~\n#{extends 'main.html' /}\n#{set title:'Dashboard' /}\n\n#{menu id:\"dashboard\"/}\n\n#{list items:playlists, as:'playlist'}\n  <section class=\"ui segment\">\n    <h2 class=\"ui header\">\n      ${playlist.title}\n    </h2>\n    #{listsongs playlist:playlist/}\n  </section>\n#{/list}\n~~~\n\nBrowse the dashboard app now - and you should see the two views:\n\n![](img/13.png)\n\nSee if you can follow the logic from the controller to the view:\n\n~~~\n...\n    render (\"dashboard.html\", playlists);\n...\n~~~\n\nThen in the view - a loop iterating over the playlists \n\n~~~\n#{list items:playlists, as:'playlist'}\n  ...\n  ...\n#{/list}\n~~~\n\n... and finally in `listsongs.html`, iterating over each song in a single playlist:\n\n~~~\n    ...\n    #{list items:_playlist.songs, as:'song'}\n      ...\n      ...\n    #{/list}\n    ...\n~~~\n\nThis is a complex flow from java into one template... then into another.\n\n"
    },
  
    {
    "title": " Exercises ",
    "shortTitle": "Exercises",
    "contentMd" : "# Exercises \n\n## Exercise 1: Download and Rename Sample Solution\n\nA complete version of the app as it should be at the end of this lab:\n\n- <https://github.com/edeleastar/playlist/releases/tag/playist-1.end>\n\nDownload this, and unzip it. Then, from a shell inside the folder enter:\n\n~~~\nplay idealize\n~~~\n\n... and then open the project. Run the project (using `play run` from the command line) and examine the running program by browsing to:\n\n- <http://localhost:9000>\n\n## Exercise 2: Review Playlist Data Structure\n\nLook again at the playlist as represented in:\n\n~~~\n    Song s1 = new Song(\"Piano Sonata No. 3\", \"Beethoven\");\n    Song s2 = new Song(\"Piano Sonata No. 7\", \"Beethoven\");\n    Song s3 = new Song(\"Piano Sonata No. 10\", \"Beethoven\");\n    Playlist p1 = new Playlist(\"Beethoven Sonatas\");\n    p1.songs.add (s1);\n    p1.songs.add (s2);\n    p1.songs.add (s3);\n    \n    Song s4 = new Song(\"Piano Concerto No. 1\", \"Beethoven\");\n    Song s5 = new Song(\"Piano Concerto No. 12\", \"Beethoven\");\n    Song s6 = new Song(\"Piano Concerto No. 23\", \"Beethoven\");\n    Playlist p2 = new Playlist(\"Beethoven Concertos\");\n    p2.songs.add (s4);\n    p2.songs.add (s5);\n    p2.songs.add (s6);\n    \n    List<Playlist> playlists = new ArrayList<Playlist>();\n    playlists.add(p1);\n    playlists.add(p2);\n~~~\n\nReview the structure carefully. Can you draw a picture of the structure of the data? Extend your version of the app to contain a new playlist - make up some songs. Verify that they are rendered as expected.\n\n## Exercise 3: New Fields\n\nExtend the song model to also have a `duration` field + a `genre` field. Change the constructor to initialise these fields. Modify the dashboard view to display these new fields.\n\n## Exercise 4: Extend Views\n\nExtend the following views:\n\n- Welcome: Extend the welcome view to contain a more detailed outline of the purpose of the application\n- About: Extend the about view to provide contact details (may be fictitious) for the author/company that created the app.\n"
    }
  
  ]
  }

